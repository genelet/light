// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: proto/sqlast.proto

package xast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatorType int32

const (
	OperatorType_Plus     OperatorType = 0
	OperatorType_Minus    OperatorType = 1
	OperatorType_Multiply OperatorType = 2
	OperatorType_Divide   OperatorType = 3
	OperatorType_Modulus  OperatorType = 4
	OperatorType_Gt       OperatorType = 5
	OperatorType_Lt       OperatorType = 6
	OperatorType_GtEq     OperatorType = 7
	OperatorType_LtEq     OperatorType = 8
	OperatorType_Eq       OperatorType = 9
	OperatorType_NotEq    OperatorType = 10
	OperatorType_And      OperatorType = 11
	OperatorType_Or       OperatorType = 12
	OperatorType_Not      OperatorType = 13
	OperatorType_Like     OperatorType = 14
	OperatorType_NotLike  OperatorType = 15
	OperatorType_None     OperatorType = 16
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0:  "Plus",
		1:  "Minus",
		2:  "Multiply",
		3:  "Divide",
		4:  "Modulus",
		5:  "Gt",
		6:  "Lt",
		7:  "GtEq",
		8:  "LtEq",
		9:  "Eq",
		10: "NotEq",
		11: "And",
		12: "Or",
		13: "Not",
		14: "Like",
		15: "NotLike",
		16: "None",
	}
	OperatorType_value = map[string]int32{
		"Plus":     0,
		"Minus":    1,
		"Multiply": 2,
		"Divide":   3,
		"Modulus":  4,
		"Gt":       5,
		"Lt":       6,
		"GtEq":     7,
		"LtEq":     8,
		"Eq":       9,
		"NotEq":    10,
		"And":      11,
		"Or":       12,
		"Not":      13,
		"Like":     14,
		"NotLike":  15,
		"None":     16,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sqlast_proto_enumTypes[0].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_proto_sqlast_proto_enumTypes[0]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{0}
}

type AggType int32

const (
	AggType_UnknownAgg AggType = 0
	AggType_MAX        AggType = 1
	AggType_MIN        AggType = 2
	AggType_COUNT      AggType = 3
	AggType_SUM        AggType = 4
	AggType_AVG        AggType = 5
)

// Enum value maps for AggType.
var (
	AggType_name = map[int32]string{
		0: "UnknownAgg",
		1: "MAX",
		2: "MIN",
		3: "COUNT",
		4: "SUM",
		5: "AVG",
	}
	AggType_value = map[string]int32{
		"UnknownAgg": 0,
		"MAX":        1,
		"MIN":        2,
		"COUNT":      3,
		"SUM":        4,
		"AVG":        5,
	}
)

func (x AggType) Enum() *AggType {
	p := new(AggType)
	*p = x
	return p
}

func (x AggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sqlast_proto_enumTypes[1].Descriptor()
}

func (AggType) Type() protoreflect.EnumType {
	return &file_proto_sqlast_proto_enumTypes[1]
}

func (x AggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggType.Descriptor instead.
func (AggType) EnumDescriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{1}
}

type SetOperatorType int32

const (
	SetOperatorType_Union     SetOperatorType = 0
	SetOperatorType_Intersect SetOperatorType = 1
	SetOperatorType_Except    SetOperatorType = 2
)

// Enum value maps for SetOperatorType.
var (
	SetOperatorType_name = map[int32]string{
		0: "Union",
		1: "Intersect",
		2: "Except",
	}
	SetOperatorType_value = map[string]int32{
		"Union":     0,
		"Intersect": 1,
		"Except":    2,
	}
)

func (x SetOperatorType) Enum() *SetOperatorType {
	p := new(SetOperatorType)
	*p = x
	return p
}

func (x SetOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sqlast_proto_enumTypes[2].Descriptor()
}

func (SetOperatorType) Type() protoreflect.EnumType {
	return &file_proto_sqlast_proto_enumTypes[2]
}

func (x SetOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOperatorType.Descriptor instead.
func (SetOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{2}
}

type JoinTypeCondition int32

const (
	JoinTypeCondition_INNER      JoinTypeCondition = 0
	JoinTypeCondition_LEFT       JoinTypeCondition = 1
	JoinTypeCondition_RIGHT      JoinTypeCondition = 2
	JoinTypeCondition_FULL       JoinTypeCondition = 3
	JoinTypeCondition_LEFTOUTER  JoinTypeCondition = 4
	JoinTypeCondition_RIGHTOUTER JoinTypeCondition = 5
	JoinTypeCondition_FULLOUTER  JoinTypeCondition = 6
	JoinTypeCondition_IMPLICIT   JoinTypeCondition = 7
)

// Enum value maps for JoinTypeCondition.
var (
	JoinTypeCondition_name = map[int32]string{
		0: "INNER",
		1: "LEFT",
		2: "RIGHT",
		3: "FULL",
		4: "LEFTOUTER",
		5: "RIGHTOUTER",
		6: "FULLOUTER",
		7: "IMPLICIT",
	}
	JoinTypeCondition_value = map[string]int32{
		"INNER":      0,
		"LEFT":       1,
		"RIGHT":      2,
		"FULL":       3,
		"LEFTOUTER":  4,
		"RIGHTOUTER": 5,
		"FULLOUTER":  6,
		"IMPLICIT":   7,
	}
)

func (x JoinTypeCondition) Enum() *JoinTypeCondition {
	p := new(JoinTypeCondition)
	*p = x
	return p
}

func (x JoinTypeCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinTypeCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sqlast_proto_enumTypes[3].Descriptor()
}

func (JoinTypeCondition) Type() protoreflect.EnumType {
	return &file_proto_sqlast_proto_enumTypes[3]
}

func (x JoinTypeCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinTypeCondition.Descriptor instead.
func (JoinTypeCondition) EnumDescriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{3}
}

type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line int32 `protobuf:"varint,1,opt,name=Line,proto3" json:"Line,omitempty"`
	Col  int32 `protobuf:"varint,2,opt,name=Col,proto3" json:"Col,omitempty"`
}

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{0}
}

func (x *Pos) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Pos) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

type Ident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Ident) Reset() {
	*x = Ident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ident) ProtoMessage() {}

func (x *Ident) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ident.ProtoReflect.Descriptor instead.
func (*Ident) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{1}
}

func (x *Ident) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Ident) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Ident) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type CompoundIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idents []*Ident `protobuf:"bytes,1,rep,name=Idents,proto3" json:"Idents,omitempty"`
}

func (x *CompoundIdent) Reset() {
	*x = CompoundIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundIdent) ProtoMessage() {}

func (x *CompoundIdent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundIdent.ProtoReflect.Descriptor instead.
func (*CompoundIdent) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{2}
}

func (x *CompoundIdent) GetIdents() []*Ident {
	if x != nil {
		return x.Idents
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type OperatorType `protobuf:"varint,1,opt,name=Type,proto3,enum=sqlast.OperatorType" json:"Type,omitempty"`
	From *Pos         `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos         `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{3}
}

func (x *Operator) GetType() OperatorType {
	if x != nil {
		return x.Type
	}
	return OperatorType_Plus
}

func (x *Operator) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Operator) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type SetOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SetOperatorType `protobuf:"varint,1,opt,name=Type,proto3,enum=sqlast.SetOperatorType" json:"Type,omitempty"`
	From *Pos            `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos            `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *SetOperator) Reset() {
	*x = SetOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperator) ProtoMessage() {}

func (x *SetOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperator.ProtoReflect.Descriptor instead.
func (*SetOperator) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{4}
}

func (x *SetOperator) GetType() SetOperatorType {
	if x != nil {
		return x.Type
	}
	return SetOperatorType_Union
}

func (x *SetOperator) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SetOperator) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type AggFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName AggType `protobuf:"varint,1,opt,name=TypeName,proto3,enum=sqlast.AggType" json:"TypeName,omitempty"`
	// starting from the second args. The first one is in FunctionField below
	RestArgs []*CompoundIdent `protobuf:"bytes,2,rep,name=RestArgs,proto3" json:"RestArgs,omitempty"`
	From     *Pos             `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To       *Pos             `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *AggFunction) Reset() {
	*x = AggFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggFunction) ProtoMessage() {}

func (x *AggFunction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggFunction.ProtoReflect.Descriptor instead.
func (*AggFunction) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{5}
}

func (x *AggFunction) GetTypeName() AggType {
	if x != nil {
		return x.TypeName
	}
	return AggType_UnknownAgg
}

func (x *AggFunction) GetRestArgs() []*CompoundIdent {
	if x != nil {
		return x.RestArgs
	}
	return nil
}

func (x *AggFunction) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AggFunction) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type JoinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition JoinTypeCondition `protobuf:"varint,1,opt,name=Condition,proto3,enum=sqlast.JoinTypeCondition" json:"Condition,omitempty"`
	From      *Pos              `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To        *Pos              `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *JoinType) Reset() {
	*x = JoinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinType) ProtoMessage() {}

func (x *JoinType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinType.ProtoReflect.Descriptor instead.
func (*JoinType) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{6}
}

func (x *JoinType) GetCondition() JoinTypeCondition {
	if x != nil {
		return x.Condition
	}
	return JoinTypeCondition_INNER
}

func (x *JoinType) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *JoinType) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type StringUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *StringUnit) Reset() {
	*x = StringUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringUnit) ProtoMessage() {}

func (x *StringUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringUnit.ProtoReflect.Descriptor instead.
func (*StringUnit) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{7}
}

func (x *StringUnit) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringUnit) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StringUnit) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type DoubleUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos    `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos    `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *DoubleUnit) Reset() {
	*x = DoubleUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleUnit) ProtoMessage() {}

func (x *DoubleUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleUnit.ProtoReflect.Descriptor instead.
func (*DoubleUnit) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{8}
}

func (x *DoubleUnit) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DoubleUnit) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DoubleUnit) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type LongUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos  `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos  `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *LongUnit) Reset() {
	*x = LongUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongUnit) ProtoMessage() {}

func (x *LongUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongUnit.ProtoReflect.Descriptor instead.
func (*LongUnit) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{9}
}

func (x *LongUnit) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LongUnit) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *LongUnit) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type QueryStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	With            *Pos                        `protobuf:"bytes,1,opt,name=With,proto3" json:"With,omitempty"`
	CTEs            []*QueryStmt_CTE            `protobuf:"bytes,2,rep,name=CTEs,proto3" json:"CTEs,omitempty"`
	Body            *QueryStmt_SetOperationExpr `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
	OrderBy         []*QueryStmt_OrderByExpr    `protobuf:"bytes,5,rep,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	LimitExpression *QueryStmt_LimitExpr        `protobuf:"bytes,6,opt,name=LimitExpression,proto3" json:"LimitExpression,omitempty"`
}

func (x *QueryStmt) Reset() {
	*x = QueryStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt) ProtoMessage() {}

func (x *QueryStmt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt.ProtoReflect.Descriptor instead.
func (*QueryStmt) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10}
}

func (x *QueryStmt) GetWith() *Pos {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *QueryStmt) GetCTEs() []*QueryStmt_CTE {
	if x != nil {
		return x.CTEs
	}
	return nil
}

func (x *QueryStmt) GetBody() *QueryStmt_SetOperationExpr {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *QueryStmt) GetOrderBy() []*QueryStmt_OrderByExpr {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *QueryStmt) GetLimitExpression() *QueryStmt_LimitExpr {
	if x != nil {
		return x.LimitExpression
	}
	return nil
}

type QueryStmt_CTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliasName *Ident     `protobuf:"bytes,1,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
	Query     *QueryStmt `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	RParen    *Pos       `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *QueryStmt_CTE) Reset() {
	*x = QueryStmt_CTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_CTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_CTE) ProtoMessage() {}

func (x *QueryStmt_CTE) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_CTE.ProtoReflect.Descriptor instead.
func (*QueryStmt_CTE) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 0}
}

func (x *QueryStmt_CTE) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

func (x *QueryStmt_CTE) GetQuery() *QueryStmt {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryStmt_CTE) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type QueryStmt_InSubQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     *CompoundIdent `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	SubQuery *QueryStmt     `protobuf:"bytes,2,opt,name=SubQuery,proto3" json:"SubQuery,omitempty"`
	Negated  bool           `protobuf:"varint,3,opt,name=Negated,proto3" json:"Negated,omitempty"`
	RParen   *Pos           `protobuf:"bytes,4,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *QueryStmt_InSubQuery) Reset() {
	*x = QueryStmt_InSubQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_InSubQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_InSubQuery) ProtoMessage() {}

func (x *QueryStmt_InSubQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_InSubQuery.ProtoReflect.Descriptor instead.
func (*QueryStmt_InSubQuery) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 1}
}

func (x *QueryStmt_InSubQuery) GetExpr() *CompoundIdent {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryStmt_InSubQuery) GetSubQuery() *QueryStmt {
	if x != nil {
		return x.SubQuery
	}
	return nil
}

func (x *QueryStmt_InSubQuery) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *QueryStmt_InSubQuery) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type QueryStmt_BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LeftOneOf:
	//	*QueryStmt_BinaryExpr_LeftIdents
	//	*QueryStmt_BinaryExpr_LeftBinary
	LeftOneOf isQueryStmt_BinaryExpr_LeftOneOf `protobuf_oneof:"LeftOneOf"`
	Op        *Operator                        `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`
	// Types that are assignable to RightOneOf:
	//	*QueryStmt_BinaryExpr_RightIdents
	//	*QueryStmt_BinaryExpr_RightBinary
	//	*QueryStmt_BinaryExpr_QueryValue
	//	*QueryStmt_BinaryExpr_SingleQuotedString
	//	*QueryStmt_BinaryExpr_DoubleValue
	//	*QueryStmt_BinaryExpr_LongValue
	RightOneOf isQueryStmt_BinaryExpr_RightOneOf `protobuf_oneof:"RightOneOf"`
}

func (x *QueryStmt_BinaryExpr) Reset() {
	*x = QueryStmt_BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_BinaryExpr) ProtoMessage() {}

func (x *QueryStmt_BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_BinaryExpr.ProtoReflect.Descriptor instead.
func (*QueryStmt_BinaryExpr) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 2}
}

func (m *QueryStmt_BinaryExpr) GetLeftOneOf() isQueryStmt_BinaryExpr_LeftOneOf {
	if m != nil {
		return m.LeftOneOf
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetLeftIdents() *CompoundIdent {
	if x, ok := x.GetLeftOneOf().(*QueryStmt_BinaryExpr_LeftIdents); ok {
		return x.LeftIdents
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetLeftBinary() *QueryStmt_BinaryExpr {
	if x, ok := x.GetLeftOneOf().(*QueryStmt_BinaryExpr_LeftBinary); ok {
		return x.LeftBinary
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetOp() *Operator {
	if x != nil {
		return x.Op
	}
	return nil
}

func (m *QueryStmt_BinaryExpr) GetRightOneOf() isQueryStmt_BinaryExpr_RightOneOf {
	if m != nil {
		return m.RightOneOf
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetRightIdents() *CompoundIdent {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_RightIdents); ok {
		return x.RightIdents
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetRightBinary() *QueryStmt_BinaryExpr {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_RightBinary); ok {
		return x.RightBinary
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetQueryValue() *QueryStmt_InSubQuery {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_QueryValue); ok {
		return x.QueryValue
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetSingleQuotedString() *StringUnit {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_SingleQuotedString); ok {
		return x.SingleQuotedString
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetDoubleValue() *DoubleUnit {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_DoubleValue); ok {
		return x.DoubleValue
	}
	return nil
}

func (x *QueryStmt_BinaryExpr) GetLongValue() *LongUnit {
	if x, ok := x.GetRightOneOf().(*QueryStmt_BinaryExpr_LongValue); ok {
		return x.LongValue
	}
	return nil
}

type isQueryStmt_BinaryExpr_LeftOneOf interface {
	isQueryStmt_BinaryExpr_LeftOneOf()
}

type QueryStmt_BinaryExpr_LeftIdents struct {
	LeftIdents *CompoundIdent `protobuf:"bytes,1,opt,name=LeftIdents,proto3,oneof"`
}

type QueryStmt_BinaryExpr_LeftBinary struct {
	LeftBinary *QueryStmt_BinaryExpr `protobuf:"bytes,2,opt,name=LeftBinary,proto3,oneof"`
}

func (*QueryStmt_BinaryExpr_LeftIdents) isQueryStmt_BinaryExpr_LeftOneOf() {}

func (*QueryStmt_BinaryExpr_LeftBinary) isQueryStmt_BinaryExpr_LeftOneOf() {}

type isQueryStmt_BinaryExpr_RightOneOf interface {
	isQueryStmt_BinaryExpr_RightOneOf()
}

type QueryStmt_BinaryExpr_RightIdents struct {
	RightIdents *CompoundIdent `protobuf:"bytes,4,opt,name=RightIdents,proto3,oneof"`
}

type QueryStmt_BinaryExpr_RightBinary struct {
	RightBinary *QueryStmt_BinaryExpr `protobuf:"bytes,5,opt,name=RightBinary,proto3,oneof"`
}

type QueryStmt_BinaryExpr_QueryValue struct {
	QueryValue *QueryStmt_InSubQuery `protobuf:"bytes,6,opt,name=QueryValue,proto3,oneof"`
}

type QueryStmt_BinaryExpr_SingleQuotedString struct {
	SingleQuotedString *StringUnit `protobuf:"bytes,7,opt,name=SingleQuotedString,proto3,oneof"`
}

type QueryStmt_BinaryExpr_DoubleValue struct {
	DoubleValue *DoubleUnit `protobuf:"bytes,8,opt,name=DoubleValue,proto3,oneof"`
}

type QueryStmt_BinaryExpr_LongValue struct {
	LongValue *LongUnit `protobuf:"bytes,9,opt,name=LongValue,proto3,oneof"`
}

func (*QueryStmt_BinaryExpr_RightIdents) isQueryStmt_BinaryExpr_RightOneOf() {}

func (*QueryStmt_BinaryExpr_RightBinary) isQueryStmt_BinaryExpr_RightOneOf() {}

func (*QueryStmt_BinaryExpr_QueryValue) isQueryStmt_BinaryExpr_RightOneOf() {}

func (*QueryStmt_BinaryExpr_SingleQuotedString) isQueryStmt_BinaryExpr_RightOneOf() {}

func (*QueryStmt_BinaryExpr_DoubleValue) isQueryStmt_BinaryExpr_RightOneOf() {}

func (*QueryStmt_BinaryExpr_LongValue) isQueryStmt_BinaryExpr_RightOneOf() {}

type QueryStmt_SQLSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistinctBool bool                                 `protobuf:"varint,1,opt,name=DistinctBool,proto3" json:"DistinctBool,omitempty"`
	Projection   []*QueryStmt_SQLSelect_SQLSelectItem `protobuf:"bytes,2,rep,name=Projection,proto3" json:"Projection,omitempty"`
	FromClause   []*QueryStmt_SQLSelect_QualifiedJoin `protobuf:"bytes,3,rep,name=FromClause,proto3" json:"FromClause,omitempty"`
	// Types that are assignable to WhereClause:
	//	*QueryStmt_SQLSelect_InQuery
	//	*QueryStmt_SQLSelect_BinExpr
	WhereClause   isQueryStmt_SQLSelect_WhereClause `protobuf_oneof:"WhereClause"`
	GroupByClause []*CompoundIdent                  `protobuf:"bytes,8,rep,name=GroupByClause,proto3" json:"GroupByClause,omitempty"`
	HavingClause  *QueryStmt_BinaryExpr             `protobuf:"bytes,9,opt,name=HavingClause,proto3" json:"HavingClause,omitempty"`
	Select        *Pos                              `protobuf:"bytes,10,opt,name=Select,proto3" json:"Select,omitempty"`
}

func (x *QueryStmt_SQLSelect) Reset() {
	*x = QueryStmt_SQLSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_SQLSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_SQLSelect) ProtoMessage() {}

func (x *QueryStmt_SQLSelect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_SQLSelect.ProtoReflect.Descriptor instead.
func (*QueryStmt_SQLSelect) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 3}
}

func (x *QueryStmt_SQLSelect) GetDistinctBool() bool {
	if x != nil {
		return x.DistinctBool
	}
	return false
}

func (x *QueryStmt_SQLSelect) GetProjection() []*QueryStmt_SQLSelect_SQLSelectItem {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetFromClause() []*QueryStmt_SQLSelect_QualifiedJoin {
	if x != nil {
		return x.FromClause
	}
	return nil
}

func (m *QueryStmt_SQLSelect) GetWhereClause() isQueryStmt_SQLSelect_WhereClause {
	if m != nil {
		return m.WhereClause
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetInQuery() *QueryStmt_InSubQuery {
	if x, ok := x.GetWhereClause().(*QueryStmt_SQLSelect_InQuery); ok {
		return x.InQuery
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetBinExpr() *QueryStmt_BinaryExpr {
	if x, ok := x.GetWhereClause().(*QueryStmt_SQLSelect_BinExpr); ok {
		return x.BinExpr
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetGroupByClause() []*CompoundIdent {
	if x != nil {
		return x.GroupByClause
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetHavingClause() *QueryStmt_BinaryExpr {
	if x != nil {
		return x.HavingClause
	}
	return nil
}

func (x *QueryStmt_SQLSelect) GetSelect() *Pos {
	if x != nil {
		return x.Select
	}
	return nil
}

type isQueryStmt_SQLSelect_WhereClause interface {
	isQueryStmt_SQLSelect_WhereClause()
}

type QueryStmt_SQLSelect_InQuery struct {
	InQuery *QueryStmt_InSubQuery `protobuf:"bytes,4,opt,name=InQuery,proto3,oneof"`
}

type QueryStmt_SQLSelect_BinExpr struct {
	BinExpr *QueryStmt_BinaryExpr `protobuf:"bytes,5,opt,name=BinExpr,proto3,oneof"`
}

func (*QueryStmt_SQLSelect_InQuery) isQueryStmt_SQLSelect_WhereClause() {}

func (*QueryStmt_SQLSelect_BinExpr) isQueryStmt_SQLSelect_WhereClause() {}

type QueryStmt_SetOperationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftSide  *QueryStmt_SQLSelect        `protobuf:"bytes,1,opt,name=LeftSide,proto3" json:"LeftSide,omitempty"`
	AllBool   bool                        `protobuf:"varint,2,opt,name=AllBool,proto3" json:"AllBool,omitempty"`
	Op        *SetOperator                `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`
	RightSide *QueryStmt_SetOperationExpr `protobuf:"bytes,4,opt,name=RightSide,proto3" json:"RightSide,omitempty"`
}

func (x *QueryStmt_SetOperationExpr) Reset() {
	*x = QueryStmt_SetOperationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_SetOperationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_SetOperationExpr) ProtoMessage() {}

func (x *QueryStmt_SetOperationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_SetOperationExpr.ProtoReflect.Descriptor instead.
func (*QueryStmt_SetOperationExpr) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 4}
}

func (x *QueryStmt_SetOperationExpr) GetLeftSide() *QueryStmt_SQLSelect {
	if x != nil {
		return x.LeftSide
	}
	return nil
}

func (x *QueryStmt_SetOperationExpr) GetAllBool() bool {
	if x != nil {
		return x.AllBool
	}
	return false
}

func (x *QueryStmt_SetOperationExpr) GetOp() *SetOperator {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *QueryStmt_SetOperationExpr) GetRightSide() *QueryStmt_SetOperationExpr {
	if x != nil {
		return x.RightSide
	}
	return nil
}

type QueryStmt_OrderByExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr        *CompoundIdent `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	OrderingPos *Pos           `protobuf:"bytes,2,opt,name=OrderingPos,proto3" json:"OrderingPos,omitempty"`
	ASCBool     bool           `protobuf:"varint,3,opt,name=ASCBool,proto3" json:"ASCBool,omitempty"`
}

func (x *QueryStmt_OrderByExpr) Reset() {
	*x = QueryStmt_OrderByExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_OrderByExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_OrderByExpr) ProtoMessage() {}

func (x *QueryStmt_OrderByExpr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_OrderByExpr.ProtoReflect.Descriptor instead.
func (*QueryStmt_OrderByExpr) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 5}
}

func (x *QueryStmt_OrderByExpr) GetExpr() *CompoundIdent {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryStmt_OrderByExpr) GetOrderingPos() *Pos {
	if x != nil {
		return x.OrderingPos
	}
	return nil
}

func (x *QueryStmt_OrderByExpr) GetASCBool() bool {
	if x != nil {
		return x.ASCBool
	}
	return false
}

type QueryStmt_LimitExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBool     bool      `protobuf:"varint,1,opt,name=AllBool,proto3" json:"AllBool,omitempty"`
	AllPos      *Pos      `protobuf:"bytes,2,opt,name=AllPos,proto3" json:"AllPos,omitempty"`
	Limit       *Pos      `protobuf:"bytes,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	LimitValue  *LongUnit `protobuf:"bytes,4,opt,name=LimitValue,proto3" json:"LimitValue,omitempty"`
	OffsetValue *LongUnit `protobuf:"bytes,5,opt,name=OffsetValue,proto3" json:"OffsetValue,omitempty"`
}

func (x *QueryStmt_LimitExpr) Reset() {
	*x = QueryStmt_LimitExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_LimitExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_LimitExpr) ProtoMessage() {}

func (x *QueryStmt_LimitExpr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_LimitExpr.ProtoReflect.Descriptor instead.
func (*QueryStmt_LimitExpr) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 6}
}

func (x *QueryStmt_LimitExpr) GetAllBool() bool {
	if x != nil {
		return x.AllBool
	}
	return false
}

func (x *QueryStmt_LimitExpr) GetAllPos() *Pos {
	if x != nil {
		return x.AllPos
	}
	return nil
}

func (x *QueryStmt_LimitExpr) GetLimit() *Pos {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *QueryStmt_LimitExpr) GetLimitValue() *LongUnit {
	if x != nil {
		return x.LimitValue
	}
	return nil
}

func (x *QueryStmt_LimitExpr) GetOffsetValue() *LongUnit {
	if x != nil {
		return x.OffsetValue
	}
	return nil
}

type QueryStmt_SQLSelect_SQLSelectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldFunction *AggFunction   `protobuf:"bytes,1,opt,name=FieldFunction,proto3" json:"FieldFunction,omitempty"`
	FieldIdents   *CompoundIdent `protobuf:"bytes,2,opt,name=FieldIdents,proto3" json:"FieldIdents,omitempty"`
	AliasName     *Ident         `protobuf:"bytes,3,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
}

func (x *QueryStmt_SQLSelect_SQLSelectItem) Reset() {
	*x = QueryStmt_SQLSelect_SQLSelectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_SQLSelect_SQLSelectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_SQLSelect_SQLSelectItem) ProtoMessage() {}

func (x *QueryStmt_SQLSelect_SQLSelectItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_SQLSelect_SQLSelectItem.ProtoReflect.Descriptor instead.
func (*QueryStmt_SQLSelect_SQLSelectItem) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 3, 0}
}

func (x *QueryStmt_SQLSelect_SQLSelectItem) GetFieldFunction() *AggFunction {
	if x != nil {
		return x.FieldFunction
	}
	return nil
}

func (x *QueryStmt_SQLSelect_SQLSelectItem) GetFieldIdents() *CompoundIdent {
	if x != nil {
		return x.FieldIdents
	}
	return nil
}

func (x *QueryStmt_SQLSelect_SQLSelectItem) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

type QueryStmt_SQLSelect_QualifiedJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *CompoundIdent                                   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	AliasName     *Ident                                           `protobuf:"bytes,2,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
	LeftElement   *QueryStmt_SQLSelect_QualifiedJoin               `protobuf:"bytes,3,opt,name=LeftElement,proto3" json:"LeftElement,omitempty"`
	TypeCondition *JoinType                                        `protobuf:"bytes,4,opt,name=TypeCondition,proto3" json:"TypeCondition,omitempty"`
	Spec          *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) Reset() {
	*x = QueryStmt_SQLSelect_QualifiedJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_SQLSelect_QualifiedJoin) ProtoMessage() {}

func (x *QueryStmt_SQLSelect_QualifiedJoin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_SQLSelect_QualifiedJoin.ProtoReflect.Descriptor instead.
func (*QueryStmt_SQLSelect_QualifiedJoin) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 3, 1}
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) GetName() *CompoundIdent {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) GetLeftElement() *QueryStmt_SQLSelect_QualifiedJoin {
	if x != nil {
		return x.LeftElement
	}
	return nil
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) GetTypeCondition() *JoinType {
	if x != nil {
		return x.TypeCondition
	}
	return nil
}

func (x *QueryStmt_SQLSelect_QualifiedJoin) GetSpec() *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition {
	if x != nil {
		return x.Spec
	}
	return nil
}

type QueryStmt_SQLSelect_QualifiedJoin_JoinCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchCondition *QueryStmt_BinaryExpr `protobuf:"bytes,1,opt,name=SearchCondition,proto3" json:"SearchCondition,omitempty"`
	On              *Pos                  `protobuf:"bytes,2,opt,name=On,proto3" json:"On,omitempty"`
}

func (x *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) Reset() {
	*x = QueryStmt_SQLSelect_QualifiedJoin_JoinCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sqlast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) ProtoMessage() {}

func (x *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sqlast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_SQLSelect_QualifiedJoin_JoinCondition.ProtoReflect.Descriptor instead.
func (*QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) Descriptor() ([]byte, []int) {
	return file_proto_sqlast_proto_rawDescGZIP(), []int{10, 3, 1, 0}
}

func (x *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) GetSearchCondition() *QueryStmt_BinaryExpr {
	if x != nil {
		return x.SearchCondition
	}
	return nil
}

func (x *QueryStmt_SQLSelect_QualifiedJoin_JoinCondition) GetOn() *Pos {
	if x != nil {
		return x.On
	}
	return nil
}

var File_proto_sqlast_proto protoreflect.FileDescriptor

var file_proto_sqlast_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x6f, 0x6c, 0x22, 0x5b, 0x0a, 0x05, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x36, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x72,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02,
	0x54, 0x6f, 0x22, 0x78, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0xab, 0x01, 0x0a,
	0x0b, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x52, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a,
	0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x60,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f,
	0x22, 0x60, 0x0a, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02,
	0x54, 0x6f, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02,
	0x54, 0x6f, 0x22, 0xe9, 0x15, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x1f, 0x0a, 0x04, 0x57, 0x69, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x57, 0x69, 0x74,
	0x68, 0x12, 0x29, 0x0a, 0x04, 0x43, 0x54, 0x45, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6d, 0x74, 0x2e, 0x43, 0x54, 0x45, 0x52, 0x04, 0x43, 0x54, 0x45, 0x73, 0x12, 0x36, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x45, 0x0a,
	0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x03, 0x43, 0x54, 0x45, 0x12, 0x2b, 0x0a, 0x09,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x1a, 0xa5, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x53, 0x75,
	0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x1a,
	0xaf, 0x04, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x65, 0x66,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x65, 0x66,
	0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x4f, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x49, 0x6e,
	0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x01, 0x52, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0b,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x65, 0x4f,
	0x66, 0x1a, 0xd1, 0x08, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x49, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x49, 0x6e,
	0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x49, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x42, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3b, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x48, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6d, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0c,
	0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x1a, 0xb0, 0x01, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xaf, 0x03, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b,
	0x0a, 0x0b, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x0b,
	0x4c, 0x65, 0x66, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x1a, 0x74, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x02, 0x4f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x02, 0x4f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x4c, 0x65,
	0x66, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e,
	0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a,
	0x02, 0x4f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02,
	0x4f, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x69, 0x64, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x2d, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x53, 0x43, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x41, 0x53, 0x43, 0x42, 0x6f, 0x6f, 0x6c, 0x1a, 0xd3, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x23, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x41,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xbc,
	0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69, 0x6e,
	0x75, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47,
	0x74, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x74, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x47,
	0x74, 0x45, 0x71, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x74, 0x45, 0x71, 0x10, 0x08, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x71, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x45, 0x71,
	0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x72, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x69, 0x6b, 0x65, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4c, 0x69, 0x6b,
	0x65, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x10, 0x2a, 0x48, 0x0a,
	0x07, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x67, 0x67, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x10, 0x02,
	0x2a, 0x79, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x07, 0x42, 0x08, 0x5a, 0x06, 0x2e,
	0x2f, 0x78, 0x61, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_sqlast_proto_rawDescOnce sync.Once
	file_proto_sqlast_proto_rawDescData = file_proto_sqlast_proto_rawDesc
)

func file_proto_sqlast_proto_rawDescGZIP() []byte {
	file_proto_sqlast_proto_rawDescOnce.Do(func() {
		file_proto_sqlast_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_sqlast_proto_rawDescData)
	})
	return file_proto_sqlast_proto_rawDescData
}

var file_proto_sqlast_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_sqlast_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_sqlast_proto_goTypes = []interface{}{
	(OperatorType)(0),                         // 0: sqlast.OperatorType
	(AggType)(0),                              // 1: sqlast.AggType
	(SetOperatorType)(0),                      // 2: sqlast.SetOperatorType
	(JoinTypeCondition)(0),                    // 3: sqlast.JoinTypeCondition
	(*Pos)(nil),                               // 4: sqlast.Pos
	(*Ident)(nil),                             // 5: sqlast.Ident
	(*CompoundIdent)(nil),                     // 6: sqlast.CompoundIdent
	(*Operator)(nil),                          // 7: sqlast.Operator
	(*SetOperator)(nil),                       // 8: sqlast.SetOperator
	(*AggFunction)(nil),                       // 9: sqlast.AggFunction
	(*JoinType)(nil),                          // 10: sqlast.JoinType
	(*StringUnit)(nil),                        // 11: sqlast.StringUnit
	(*DoubleUnit)(nil),                        // 12: sqlast.DoubleUnit
	(*LongUnit)(nil),                          // 13: sqlast.LongUnit
	(*QueryStmt)(nil),                         // 14: sqlast.QueryStmt
	(*QueryStmt_CTE)(nil),                     // 15: sqlast.QueryStmt.CTE
	(*QueryStmt_InSubQuery)(nil),              // 16: sqlast.QueryStmt.InSubQuery
	(*QueryStmt_BinaryExpr)(nil),              // 17: sqlast.QueryStmt.BinaryExpr
	(*QueryStmt_SQLSelect)(nil),               // 18: sqlast.QueryStmt.SQLSelect
	(*QueryStmt_SetOperationExpr)(nil),        // 19: sqlast.QueryStmt.SetOperationExpr
	(*QueryStmt_OrderByExpr)(nil),             // 20: sqlast.QueryStmt.OrderByExpr
	(*QueryStmt_LimitExpr)(nil),               // 21: sqlast.QueryStmt.LimitExpr
	(*QueryStmt_SQLSelect_SQLSelectItem)(nil), // 22: sqlast.QueryStmt.SQLSelect.SQLSelectItem
	(*QueryStmt_SQLSelect_QualifiedJoin)(nil), // 23: sqlast.QueryStmt.SQLSelect.QualifiedJoin
	(*QueryStmt_SQLSelect_QualifiedJoin_JoinCondition)(nil), // 24: sqlast.QueryStmt.SQLSelect.QualifiedJoin.JoinCondition
}
var file_proto_sqlast_proto_depIdxs = []int32{
	4,  // 0: sqlast.Ident.From:type_name -> sqlast.Pos
	4,  // 1: sqlast.Ident.To:type_name -> sqlast.Pos
	5,  // 2: sqlast.CompoundIdent.Idents:type_name -> sqlast.Ident
	0,  // 3: sqlast.Operator.Type:type_name -> sqlast.OperatorType
	4,  // 4: sqlast.Operator.From:type_name -> sqlast.Pos
	4,  // 5: sqlast.Operator.To:type_name -> sqlast.Pos
	2,  // 6: sqlast.SetOperator.Type:type_name -> sqlast.SetOperatorType
	4,  // 7: sqlast.SetOperator.From:type_name -> sqlast.Pos
	4,  // 8: sqlast.SetOperator.To:type_name -> sqlast.Pos
	1,  // 9: sqlast.AggFunction.TypeName:type_name -> sqlast.AggType
	6,  // 10: sqlast.AggFunction.RestArgs:type_name -> sqlast.CompoundIdent
	4,  // 11: sqlast.AggFunction.From:type_name -> sqlast.Pos
	4,  // 12: sqlast.AggFunction.To:type_name -> sqlast.Pos
	3,  // 13: sqlast.JoinType.Condition:type_name -> sqlast.JoinTypeCondition
	4,  // 14: sqlast.JoinType.From:type_name -> sqlast.Pos
	4,  // 15: sqlast.JoinType.To:type_name -> sqlast.Pos
	4,  // 16: sqlast.StringUnit.From:type_name -> sqlast.Pos
	4,  // 17: sqlast.StringUnit.To:type_name -> sqlast.Pos
	4,  // 18: sqlast.DoubleUnit.From:type_name -> sqlast.Pos
	4,  // 19: sqlast.DoubleUnit.To:type_name -> sqlast.Pos
	4,  // 20: sqlast.LongUnit.From:type_name -> sqlast.Pos
	4,  // 21: sqlast.LongUnit.To:type_name -> sqlast.Pos
	4,  // 22: sqlast.QueryStmt.With:type_name -> sqlast.Pos
	15, // 23: sqlast.QueryStmt.CTEs:type_name -> sqlast.QueryStmt.CTE
	19, // 24: sqlast.QueryStmt.Body:type_name -> sqlast.QueryStmt.SetOperationExpr
	20, // 25: sqlast.QueryStmt.OrderBy:type_name -> sqlast.QueryStmt.OrderByExpr
	21, // 26: sqlast.QueryStmt.LimitExpression:type_name -> sqlast.QueryStmt.LimitExpr
	5,  // 27: sqlast.QueryStmt.CTE.AliasName:type_name -> sqlast.Ident
	14, // 28: sqlast.QueryStmt.CTE.Query:type_name -> sqlast.QueryStmt
	4,  // 29: sqlast.QueryStmt.CTE.RParen:type_name -> sqlast.Pos
	6,  // 30: sqlast.QueryStmt.InSubQuery.Expr:type_name -> sqlast.CompoundIdent
	14, // 31: sqlast.QueryStmt.InSubQuery.SubQuery:type_name -> sqlast.QueryStmt
	4,  // 32: sqlast.QueryStmt.InSubQuery.RParen:type_name -> sqlast.Pos
	6,  // 33: sqlast.QueryStmt.BinaryExpr.LeftIdents:type_name -> sqlast.CompoundIdent
	17, // 34: sqlast.QueryStmt.BinaryExpr.LeftBinary:type_name -> sqlast.QueryStmt.BinaryExpr
	7,  // 35: sqlast.QueryStmt.BinaryExpr.Op:type_name -> sqlast.Operator
	6,  // 36: sqlast.QueryStmt.BinaryExpr.RightIdents:type_name -> sqlast.CompoundIdent
	17, // 37: sqlast.QueryStmt.BinaryExpr.RightBinary:type_name -> sqlast.QueryStmt.BinaryExpr
	16, // 38: sqlast.QueryStmt.BinaryExpr.QueryValue:type_name -> sqlast.QueryStmt.InSubQuery
	11, // 39: sqlast.QueryStmt.BinaryExpr.SingleQuotedString:type_name -> sqlast.StringUnit
	12, // 40: sqlast.QueryStmt.BinaryExpr.DoubleValue:type_name -> sqlast.DoubleUnit
	13, // 41: sqlast.QueryStmt.BinaryExpr.LongValue:type_name -> sqlast.LongUnit
	22, // 42: sqlast.QueryStmt.SQLSelect.Projection:type_name -> sqlast.QueryStmt.SQLSelect.SQLSelectItem
	23, // 43: sqlast.QueryStmt.SQLSelect.FromClause:type_name -> sqlast.QueryStmt.SQLSelect.QualifiedJoin
	16, // 44: sqlast.QueryStmt.SQLSelect.InQuery:type_name -> sqlast.QueryStmt.InSubQuery
	17, // 45: sqlast.QueryStmt.SQLSelect.BinExpr:type_name -> sqlast.QueryStmt.BinaryExpr
	6,  // 46: sqlast.QueryStmt.SQLSelect.GroupByClause:type_name -> sqlast.CompoundIdent
	17, // 47: sqlast.QueryStmt.SQLSelect.HavingClause:type_name -> sqlast.QueryStmt.BinaryExpr
	4,  // 48: sqlast.QueryStmt.SQLSelect.Select:type_name -> sqlast.Pos
	18, // 49: sqlast.QueryStmt.SetOperationExpr.LeftSide:type_name -> sqlast.QueryStmt.SQLSelect
	8,  // 50: sqlast.QueryStmt.SetOperationExpr.Op:type_name -> sqlast.SetOperator
	19, // 51: sqlast.QueryStmt.SetOperationExpr.RightSide:type_name -> sqlast.QueryStmt.SetOperationExpr
	6,  // 52: sqlast.QueryStmt.OrderByExpr.Expr:type_name -> sqlast.CompoundIdent
	4,  // 53: sqlast.QueryStmt.OrderByExpr.OrderingPos:type_name -> sqlast.Pos
	4,  // 54: sqlast.QueryStmt.LimitExpr.AllPos:type_name -> sqlast.Pos
	4,  // 55: sqlast.QueryStmt.LimitExpr.Limit:type_name -> sqlast.Pos
	13, // 56: sqlast.QueryStmt.LimitExpr.LimitValue:type_name -> sqlast.LongUnit
	13, // 57: sqlast.QueryStmt.LimitExpr.OffsetValue:type_name -> sqlast.LongUnit
	9,  // 58: sqlast.QueryStmt.SQLSelect.SQLSelectItem.FieldFunction:type_name -> sqlast.AggFunction
	6,  // 59: sqlast.QueryStmt.SQLSelect.SQLSelectItem.FieldIdents:type_name -> sqlast.CompoundIdent
	5,  // 60: sqlast.QueryStmt.SQLSelect.SQLSelectItem.AliasName:type_name -> sqlast.Ident
	6,  // 61: sqlast.QueryStmt.SQLSelect.QualifiedJoin.Name:type_name -> sqlast.CompoundIdent
	5,  // 62: sqlast.QueryStmt.SQLSelect.QualifiedJoin.AliasName:type_name -> sqlast.Ident
	23, // 63: sqlast.QueryStmt.SQLSelect.QualifiedJoin.LeftElement:type_name -> sqlast.QueryStmt.SQLSelect.QualifiedJoin
	10, // 64: sqlast.QueryStmt.SQLSelect.QualifiedJoin.TypeCondition:type_name -> sqlast.JoinType
	24, // 65: sqlast.QueryStmt.SQLSelect.QualifiedJoin.Spec:type_name -> sqlast.QueryStmt.SQLSelect.QualifiedJoin.JoinCondition
	17, // 66: sqlast.QueryStmt.SQLSelect.QualifiedJoin.JoinCondition.SearchCondition:type_name -> sqlast.QueryStmt.BinaryExpr
	4,  // 67: sqlast.QueryStmt.SQLSelect.QualifiedJoin.JoinCondition.On:type_name -> sqlast.Pos
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_proto_sqlast_proto_init() }
func file_proto_sqlast_proto_init() {
	if File_proto_sqlast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_sqlast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_CTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_InSubQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_SQLSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_SetOperationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_OrderByExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_LimitExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_SQLSelect_SQLSelectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_SQLSelect_QualifiedJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sqlast_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_SQLSelect_QualifiedJoin_JoinCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_sqlast_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*QueryStmt_BinaryExpr_LeftIdents)(nil),
		(*QueryStmt_BinaryExpr_LeftBinary)(nil),
		(*QueryStmt_BinaryExpr_RightIdents)(nil),
		(*QueryStmt_BinaryExpr_RightBinary)(nil),
		(*QueryStmt_BinaryExpr_QueryValue)(nil),
		(*QueryStmt_BinaryExpr_SingleQuotedString)(nil),
		(*QueryStmt_BinaryExpr_DoubleValue)(nil),
		(*QueryStmt_BinaryExpr_LongValue)(nil),
	}
	file_proto_sqlast_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*QueryStmt_SQLSelect_InQuery)(nil),
		(*QueryStmt_SQLSelect_BinExpr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_sqlast_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_sqlast_proto_goTypes,
		DependencyIndexes: file_proto_sqlast_proto_depIdxs,
		EnumInfos:         file_proto_sqlast_proto_enumTypes,
		MessageInfos:      file_proto_sqlast_proto_msgTypes,
	}.Build()
	File_proto_sqlast_proto = out.File
	file_proto_sqlast_proto_rawDesc = nil
	file_proto_sqlast_proto_goTypes = nil
	file_proto_sqlast_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: sqlast.proto

package xast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatorType int32

const (
	OperatorType_Plus     OperatorType = 0
	OperatorType_Minus    OperatorType = 1
	OperatorType_Multiply OperatorType = 2
	OperatorType_Divide   OperatorType = 3
	OperatorType_Modulus  OperatorType = 4
	OperatorType_Gt       OperatorType = 5
	OperatorType_Lt       OperatorType = 6
	OperatorType_GtEq     OperatorType = 7
	OperatorType_LtEq     OperatorType = 8
	OperatorType_Eq       OperatorType = 9
	OperatorType_NotEq    OperatorType = 10
	OperatorType_And      OperatorType = 11
	OperatorType_Or       OperatorType = 12
	OperatorType_Not      OperatorType = 13
	OperatorType_Like     OperatorType = 14
	OperatorType_NotLike  OperatorType = 15
	OperatorType_None     OperatorType = 16
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0:  "Plus",
		1:  "Minus",
		2:  "Multiply",
		3:  "Divide",
		4:  "Modulus",
		5:  "Gt",
		6:  "Lt",
		7:  "GtEq",
		8:  "LtEq",
		9:  "Eq",
		10: "NotEq",
		11: "And",
		12: "Or",
		13: "Not",
		14: "Like",
		15: "NotLike",
		16: "None",
	}
	OperatorType_value = map[string]int32{
		"Plus":     0,
		"Minus":    1,
		"Multiply": 2,
		"Divide":   3,
		"Modulus":  4,
		"Gt":       5,
		"Lt":       6,
		"GtEq":     7,
		"LtEq":     8,
		"Eq":       9,
		"NotEq":    10,
		"And":      11,
		"Or":       12,
		"Not":      13,
		"Like":     14,
		"NotLike":  15,
		"None":     16,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_sqlast_proto_enumTypes[0].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_sqlast_proto_enumTypes[0]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{0}
}

type AggType int32

const (
	AggType_UnknownAgg AggType = 0
	AggType_MAX        AggType = 1
	AggType_MIN        AggType = 2
	AggType_COUNT      AggType = 3
	AggType_SUM        AggType = 4
	AggType_AVG        AggType = 5
)

// Enum value maps for AggType.
var (
	AggType_name = map[int32]string{
		0: "UnknownAgg",
		1: "MAX",
		2: "MIN",
		3: "COUNT",
		4: "SUM",
		5: "AVG",
	}
	AggType_value = map[string]int32{
		"UnknownAgg": 0,
		"MAX":        1,
		"MIN":        2,
		"COUNT":      3,
		"SUM":        4,
		"AVG":        5,
	}
)

func (x AggType) Enum() *AggType {
	p := new(AggType)
	*p = x
	return p
}

func (x AggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggType) Descriptor() protoreflect.EnumDescriptor {
	return file_sqlast_proto_enumTypes[1].Descriptor()
}

func (AggType) Type() protoreflect.EnumType {
	return &file_sqlast_proto_enumTypes[1]
}

func (x AggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggType.Descriptor instead.
func (AggType) EnumDescriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{1}
}

type SetOperatorType int32

const (
	SetOperatorType_Union     SetOperatorType = 0
	SetOperatorType_Intersect SetOperatorType = 1
	SetOperatorType_Except    SetOperatorType = 2
)

// Enum value maps for SetOperatorType.
var (
	SetOperatorType_name = map[int32]string{
		0: "Union",
		1: "Intersect",
		2: "Except",
	}
	SetOperatorType_value = map[string]int32{
		"Union":     0,
		"Intersect": 1,
		"Except":    2,
	}
)

func (x SetOperatorType) Enum() *SetOperatorType {
	p := new(SetOperatorType)
	*p = x
	return p
}

func (x SetOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_sqlast_proto_enumTypes[2].Descriptor()
}

func (SetOperatorType) Type() protoreflect.EnumType {
	return &file_sqlast_proto_enumTypes[2]
}

func (x SetOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOperatorType.Descriptor instead.
func (SetOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{2}
}

type JoinTypeCondition int32

const (
	JoinTypeCondition_INNER      JoinTypeCondition = 0
	JoinTypeCondition_LEFT       JoinTypeCondition = 1
	JoinTypeCondition_RIGHT      JoinTypeCondition = 2
	JoinTypeCondition_FULL       JoinTypeCondition = 3
	JoinTypeCondition_LEFTOUTER  JoinTypeCondition = 4
	JoinTypeCondition_RIGHTOUTER JoinTypeCondition = 5
	JoinTypeCondition_FULLOUTER  JoinTypeCondition = 6
	JoinTypeCondition_IMPLICIT   JoinTypeCondition = 7
)

// Enum value maps for JoinTypeCondition.
var (
	JoinTypeCondition_name = map[int32]string{
		0: "INNER",
		1: "LEFT",
		2: "RIGHT",
		3: "FULL",
		4: "LEFTOUTER",
		5: "RIGHTOUTER",
		6: "FULLOUTER",
		7: "IMPLICIT",
	}
	JoinTypeCondition_value = map[string]int32{
		"INNER":      0,
		"LEFT":       1,
		"RIGHT":      2,
		"FULL":       3,
		"LEFTOUTER":  4,
		"RIGHTOUTER": 5,
		"FULLOUTER":  6,
		"IMPLICIT":   7,
	}
)

func (x JoinTypeCondition) Enum() *JoinTypeCondition {
	p := new(JoinTypeCondition)
	*p = x
	return p
}

func (x JoinTypeCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinTypeCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_sqlast_proto_enumTypes[3].Descriptor()
}

func (JoinTypeCondition) Type() protoreflect.EnumType {
	return &file_sqlast_proto_enumTypes[3]
}

func (x JoinTypeCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinTypeCondition.Descriptor instead.
func (JoinTypeCondition) EnumDescriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{3}
}

type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line int32 `protobuf:"varint,1,opt,name=Line,proto3" json:"Line,omitempty"`
	Col  int32 `protobuf:"varint,2,opt,name=Col,proto3" json:"Col,omitempty"`
}

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{0}
}

func (x *Pos) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Pos) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

type Ident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Ident) Reset() {
	*x = Ident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ident) ProtoMessage() {}

func (x *Ident) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ident.ProtoReflect.Descriptor instead.
func (*Ident) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{1}
}

func (x *Ident) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Ident) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Ident) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type CompoundIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idents []*Ident `protobuf:"bytes,1,rep,name=Idents,proto3" json:"Idents,omitempty"`
}

func (x *CompoundIdent) Reset() {
	*x = CompoundIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundIdent) ProtoMessage() {}

func (x *CompoundIdent) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundIdent.ProtoReflect.Descriptor instead.
func (*CompoundIdent) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{2}
}

func (x *CompoundIdent) GetIdents() []*Ident {
	if x != nil {
		return x.Idents
	}
	return nil
}

type ObjectName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idents []*Ident `protobuf:"bytes,1,rep,name=Idents,proto3" json:"Idents,omitempty"`
}

func (x *ObjectName) Reset() {
	*x = ObjectName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectName) ProtoMessage() {}

func (x *ObjectName) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectName.ProtoReflect.Descriptor instead.
func (*ObjectName) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{3}
}

func (x *ObjectName) GetIdents() []*Ident {
	if x != nil {
		return x.Idents
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type OperatorType `protobuf:"varint,1,opt,name=Type,proto3,enum=sqlast.OperatorType" json:"Type,omitempty"`
	From *Pos         `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos         `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{4}
}

func (x *Operator) GetType() OperatorType {
	if x != nil {
		return x.Type
	}
	return OperatorType_Plus
}

func (x *Operator) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Operator) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type SetOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SetOperatorType `protobuf:"varint,1,opt,name=Type,proto3,enum=sqlast.SetOperatorType" json:"Type,omitempty"`
	From *Pos            `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos            `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *SetOperator) Reset() {
	*x = SetOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperator) ProtoMessage() {}

func (x *SetOperator) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperator.ProtoReflect.Descriptor instead.
func (*SetOperator) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{5}
}

func (x *SetOperator) GetType() SetOperatorType {
	if x != nil {
		return x.Type
	}
	return SetOperatorType_Union
}

func (x *SetOperator) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SetOperator) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type JoinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition JoinTypeCondition `protobuf:"varint,1,opt,name=Condition,proto3,enum=sqlast.JoinTypeCondition" json:"Condition,omitempty"`
	From      *Pos              `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To        *Pos              `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *JoinType) Reset() {
	*x = JoinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinType) ProtoMessage() {}

func (x *JoinType) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinType.ProtoReflect.Descriptor instead.
func (*JoinType) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{6}
}

func (x *JoinType) GetCondition() JoinTypeCondition {
	if x != nil {
		return x.Condition
	}
	return JoinTypeCondition_INNER
}

func (x *JoinType) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *JoinType) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type SingleQuotedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *SingleQuotedString) Reset() {
	*x = SingleQuotedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleQuotedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleQuotedString) ProtoMessage() {}

func (x *SingleQuotedString) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleQuotedString.ProtoReflect.Descriptor instead.
func (*SingleQuotedString) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{7}
}

func (x *SingleQuotedString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SingleQuotedString) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SingleQuotedString) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos    `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos    `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{8}
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DoubleValue) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DoubleValue) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type LongValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	From  *Pos  `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To    *Pos  `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *LongValue) Reset() {
	*x = LongValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongValue) ProtoMessage() {}

func (x *LongValue) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongValue.ProtoReflect.Descriptor instead.
func (*LongValue) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{9}
}

func (x *LongValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LongValue) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *LongValue) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LeftOneOf:
	//
	//	*BinaryExpr_LeftIdents
	//	*BinaryExpr_LeftBinary
	//	*BinaryExpr_LeftSingleQuoted
	//	*BinaryExpr_LeftDouble
	//	*BinaryExpr_LeftLong
	LeftOneOf isBinaryExpr_LeftOneOf `protobuf_oneof:"LeftOneOf"`
	Op        *Operator              `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`
	// Types that are assignable to RightOneOf:
	//
	//	*BinaryExpr_RightIdents
	//	*BinaryExpr_RightBinary
	//	*BinaryExpr_QueryValue
	//	*BinaryExpr_SingleQuotedString
	//	*BinaryExpr_DoubleValue
	//	*BinaryExpr_LongValue
	RightOneOf isBinaryExpr_RightOneOf `protobuf_oneof:"RightOneOf"`
}

func (x *BinaryExpr) Reset() {
	*x = BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpr) ProtoMessage() {}

func (x *BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpr.ProtoReflect.Descriptor instead.
func (*BinaryExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{10}
}

func (m *BinaryExpr) GetLeftOneOf() isBinaryExpr_LeftOneOf {
	if m != nil {
		return m.LeftOneOf
	}
	return nil
}

func (x *BinaryExpr) GetLeftIdents() *CompoundIdent {
	if x, ok := x.GetLeftOneOf().(*BinaryExpr_LeftIdents); ok {
		return x.LeftIdents
	}
	return nil
}

func (x *BinaryExpr) GetLeftBinary() *BinaryExpr {
	if x, ok := x.GetLeftOneOf().(*BinaryExpr_LeftBinary); ok {
		return x.LeftBinary
	}
	return nil
}

func (x *BinaryExpr) GetLeftSingleQuoted() *SingleQuotedString {
	if x, ok := x.GetLeftOneOf().(*BinaryExpr_LeftSingleQuoted); ok {
		return x.LeftSingleQuoted
	}
	return nil
}

func (x *BinaryExpr) GetLeftDouble() *DoubleValue {
	if x, ok := x.GetLeftOneOf().(*BinaryExpr_LeftDouble); ok {
		return x.LeftDouble
	}
	return nil
}

func (x *BinaryExpr) GetLeftLong() *LongValue {
	if x, ok := x.GetLeftOneOf().(*BinaryExpr_LeftLong); ok {
		return x.LeftLong
	}
	return nil
}

func (x *BinaryExpr) GetOp() *Operator {
	if x != nil {
		return x.Op
	}
	return nil
}

func (m *BinaryExpr) GetRightOneOf() isBinaryExpr_RightOneOf {
	if m != nil {
		return m.RightOneOf
	}
	return nil
}

func (x *BinaryExpr) GetRightIdents() *CompoundIdent {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_RightIdents); ok {
		return x.RightIdents
	}
	return nil
}

func (x *BinaryExpr) GetRightBinary() *BinaryExpr {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_RightBinary); ok {
		return x.RightBinary
	}
	return nil
}

func (x *BinaryExpr) GetQueryValue() *InSubQuery {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_QueryValue); ok {
		return x.QueryValue
	}
	return nil
}

func (x *BinaryExpr) GetSingleQuotedString() *SingleQuotedString {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_SingleQuotedString); ok {
		return x.SingleQuotedString
	}
	return nil
}

func (x *BinaryExpr) GetDoubleValue() *DoubleValue {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_DoubleValue); ok {
		return x.DoubleValue
	}
	return nil
}

func (x *BinaryExpr) GetLongValue() *LongValue {
	if x, ok := x.GetRightOneOf().(*BinaryExpr_LongValue); ok {
		return x.LongValue
	}
	return nil
}

type isBinaryExpr_LeftOneOf interface {
	isBinaryExpr_LeftOneOf()
}

type BinaryExpr_LeftIdents struct {
	LeftIdents *CompoundIdent `protobuf:"bytes,1,opt,name=LeftIdents,proto3,oneof"`
}

type BinaryExpr_LeftBinary struct {
	LeftBinary *BinaryExpr `protobuf:"bytes,2,opt,name=LeftBinary,proto3,oneof"`
}

type BinaryExpr_LeftSingleQuoted struct {
	LeftSingleQuoted *SingleQuotedString `protobuf:"bytes,10,opt,name=LeftSingleQuoted,proto3,oneof"`
}

type BinaryExpr_LeftDouble struct {
	LeftDouble *DoubleValue `protobuf:"bytes,11,opt,name=LeftDouble,proto3,oneof"`
}

type BinaryExpr_LeftLong struct {
	LeftLong *LongValue `protobuf:"bytes,12,opt,name=LeftLong,proto3,oneof"`
}

func (*BinaryExpr_LeftIdents) isBinaryExpr_LeftOneOf() {}

func (*BinaryExpr_LeftBinary) isBinaryExpr_LeftOneOf() {}

func (*BinaryExpr_LeftSingleQuoted) isBinaryExpr_LeftOneOf() {}

func (*BinaryExpr_LeftDouble) isBinaryExpr_LeftOneOf() {}

func (*BinaryExpr_LeftLong) isBinaryExpr_LeftOneOf() {}

type isBinaryExpr_RightOneOf interface {
	isBinaryExpr_RightOneOf()
}

type BinaryExpr_RightIdents struct {
	RightIdents *CompoundIdent `protobuf:"bytes,4,opt,name=RightIdents,proto3,oneof"`
}

type BinaryExpr_RightBinary struct {
	RightBinary *BinaryExpr `protobuf:"bytes,5,opt,name=RightBinary,proto3,oneof"`
}

type BinaryExpr_QueryValue struct {
	QueryValue *InSubQuery `protobuf:"bytes,6,opt,name=QueryValue,proto3,oneof"`
}

type BinaryExpr_SingleQuotedString struct {
	SingleQuotedString *SingleQuotedString `protobuf:"bytes,7,opt,name=SingleQuotedString,proto3,oneof"`
}

type BinaryExpr_DoubleValue struct {
	DoubleValue *DoubleValue `protobuf:"bytes,8,opt,name=DoubleValue,proto3,oneof"`
}

type BinaryExpr_LongValue struct {
	LongValue *LongValue `protobuf:"bytes,9,opt,name=LongValue,proto3,oneof"`
}

func (*BinaryExpr_RightIdents) isBinaryExpr_RightOneOf() {}

func (*BinaryExpr_RightBinary) isBinaryExpr_RightOneOf() {}

func (*BinaryExpr_QueryValue) isBinaryExpr_RightOneOf() {}

func (*BinaryExpr_SingleQuotedString) isBinaryExpr_RightOneOf() {}

func (*BinaryExpr_DoubleValue) isBinaryExpr_RightOneOf() {}

func (*BinaryExpr_LongValue) isBinaryExpr_RightOneOf() {}

type UnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos        `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	Op   *Operator   `protobuf:"bytes,2,opt,name=Op,proto3" json:"Op,omitempty"`
	Expr *BinaryExpr `protobuf:"bytes,3,opt,name=Expr,proto3" json:"Expr,omitempty"`
}

func (x *UnaryExpr) Reset() {
	*x = UnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpr) ProtoMessage() {}

func (x *UnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpr.ProtoReflect.Descriptor instead.
func (*UnaryExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{11}
}

func (x *UnaryExpr) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *UnaryExpr) GetOp() *Operator {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *UnaryExpr) GetExpr() *BinaryExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// CASE [Operand] WHEN Conditions... THEN Results... [ELSE ElseResult] END
type ResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultClause:
	//
	//	*ResultMessage_ResultIdent
	//	*ResultMessage_ResultUnary
	ResultClause isResultMessage_ResultClause `protobuf_oneof:"ResultClause"`
}

func (x *ResultMessage) Reset() {
	*x = ResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultMessage) ProtoMessage() {}

func (x *ResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultMessage.ProtoReflect.Descriptor instead.
func (*ResultMessage) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{12}
}

func (m *ResultMessage) GetResultClause() isResultMessage_ResultClause {
	if m != nil {
		return m.ResultClause
	}
	return nil
}

func (x *ResultMessage) GetResultIdent() *Ident {
	if x, ok := x.GetResultClause().(*ResultMessage_ResultIdent); ok {
		return x.ResultIdent
	}
	return nil
}

func (x *ResultMessage) GetResultUnary() *UnaryExpr {
	if x, ok := x.GetResultClause().(*ResultMessage_ResultUnary); ok {
		return x.ResultUnary
	}
	return nil
}

type isResultMessage_ResultClause interface {
	isResultMessage_ResultClause()
}

type ResultMessage_ResultIdent struct {
	ResultIdent *Ident `protobuf:"bytes,1,opt,name=ResultIdent,proto3,oneof"`
}

type ResultMessage_ResultUnary struct {
	ResultUnary *UnaryExpr `protobuf:"bytes,2,opt,name=ResultUnary,proto3,oneof"`
}

func (*ResultMessage_ResultIdent) isResultMessage_ResultClause() {}

func (*ResultMessage_ResultUnary) isResultMessage_ResultClause() {}

type CaseExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Case       *Pos             `protobuf:"bytes,1,opt,name=Case,proto3" json:"Case,omitempty"`
	CaseEnd    *Pos             `protobuf:"bytes,2,opt,name=CaseEnd,proto3" json:"CaseEnd,omitempty"`
	Operand    *Operator        `protobuf:"bytes,3,opt,name=Operand,proto3" json:"Operand,omitempty"`
	Conditions []*BinaryExpr    `protobuf:"bytes,4,rep,name=Conditions,proto3" json:"Conditions,omitempty"`
	Results    []*ResultMessage `protobuf:"bytes,5,rep,name=Results,proto3" json:"Results,omitempty"`
	ElseResult *Ident           `protobuf:"bytes,6,opt,name=ElseResult,proto3" json:"ElseResult,omitempty"`
}

func (x *CaseExpr) Reset() {
	*x = CaseExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseExpr) ProtoMessage() {}

func (x *CaseExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseExpr.ProtoReflect.Descriptor instead.
func (*CaseExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{13}
}

func (x *CaseExpr) GetCase() *Pos {
	if x != nil {
		return x.Case
	}
	return nil
}

func (x *CaseExpr) GetCaseEnd() *Pos {
	if x != nil {
		return x.CaseEnd
	}
	return nil
}

func (x *CaseExpr) GetOperand() *Operator {
	if x != nil {
		return x.Operand
	}
	return nil
}

func (x *CaseExpr) GetConditions() []*BinaryExpr {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CaseExpr) GetResults() []*ResultMessage {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CaseExpr) GetElseResult() *Ident {
	if x != nil {
		return x.ElseResult
	}
	return nil
}

type AggFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName AggType                    `protobuf:"varint,1,opt,name=TypeName,proto3,enum=sqlast.AggType" json:"TypeName,omitempty"`
	RestArgs []*AggFunction_ArgsMessage `protobuf:"bytes,2,rep,name=RestArgs,proto3" json:"RestArgs,omitempty"`
	From     *Pos                       `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To       *Pos                       `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *AggFunction) Reset() {
	*x = AggFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggFunction) ProtoMessage() {}

func (x *AggFunction) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggFunction.ProtoReflect.Descriptor instead.
func (*AggFunction) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{14}
}

func (x *AggFunction) GetTypeName() AggType {
	if x != nil {
		return x.TypeName
	}
	return AggType_UnknownAgg
}

func (x *AggFunction) GetRestArgs() []*AggFunction_ArgsMessage {
	if x != nil {
		return x.RestArgs
	}
	return nil
}

func (x *AggFunction) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AggFunction) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type JoinCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchCondition *BinaryExpr `protobuf:"bytes,1,opt,name=SearchCondition,proto3" json:"SearchCondition,omitempty"`
	On              *Pos        `protobuf:"bytes,2,opt,name=On,proto3" json:"On,omitempty"`
}

func (x *JoinCondition) Reset() {
	*x = JoinCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCondition) ProtoMessage() {}

func (x *JoinCondition) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCondition.ProtoReflect.Descriptor instead.
func (*JoinCondition) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{15}
}

func (x *JoinCondition) GetSearchCondition() *BinaryExpr {
	if x != nil {
		return x.SearchCondition
	}
	return nil
}

func (x *JoinCondition) GetOn() *Pos {
	if x != nil {
		return x.On
	}
	return nil
}

type QualifiedJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *ObjectName    `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	AliasName     *Ident         `protobuf:"bytes,2,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
	LeftElement   *QualifiedJoin `protobuf:"bytes,3,opt,name=LeftElement,proto3" json:"LeftElement,omitempty"`
	TypeCondition *JoinType      `protobuf:"bytes,4,opt,name=TypeCondition,proto3" json:"TypeCondition,omitempty"`
	Spec          *JoinCondition `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *QualifiedJoin) Reset() {
	*x = QualifiedJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifiedJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifiedJoin) ProtoMessage() {}

func (x *QualifiedJoin) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifiedJoin.ProtoReflect.Descriptor instead.
func (*QualifiedJoin) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{16}
}

func (x *QualifiedJoin) GetName() *ObjectName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QualifiedJoin) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

func (x *QualifiedJoin) GetLeftElement() *QualifiedJoin {
	if x != nil {
		return x.LeftElement
	}
	return nil
}

func (x *QualifiedJoin) GetTypeCondition() *JoinType {
	if x != nil {
		return x.TypeCondition
	}
	return nil
}

func (x *QualifiedJoin) GetSpec() *JoinCondition {
	if x != nil {
		return x.Spec
	}
	return nil
}

type OrderByExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr        *CompoundIdent `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	OrderingPos *Pos           `protobuf:"bytes,2,opt,name=OrderingPos,proto3" json:"OrderingPos,omitempty"`
	ASCBool     bool           `protobuf:"varint,3,opt,name=ASCBool,proto3" json:"ASCBool,omitempty"`
}

func (x *OrderByExpr) Reset() {
	*x = OrderByExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByExpr) ProtoMessage() {}

func (x *OrderByExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByExpr.ProtoReflect.Descriptor instead.
func (*OrderByExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{17}
}

func (x *OrderByExpr) GetExpr() *CompoundIdent {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *OrderByExpr) GetOrderingPos() *Pos {
	if x != nil {
		return x.OrderingPos
	}
	return nil
}

func (x *OrderByExpr) GetASCBool() bool {
	if x != nil {
		return x.ASCBool
	}
	return false
}

type LimitExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBool     bool       `protobuf:"varint,1,opt,name=AllBool,proto3" json:"AllBool,omitempty"`
	AllPos      *Pos       `protobuf:"bytes,2,opt,name=AllPos,proto3" json:"AllPos,omitempty"`
	Limit       *Pos       `protobuf:"bytes,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	LimitValue  *LongValue `protobuf:"bytes,4,opt,name=LimitValue,proto3" json:"LimitValue,omitempty"`
	OffsetValue *LongValue `protobuf:"bytes,5,opt,name=OffsetValue,proto3" json:"OffsetValue,omitempty"`
}

func (x *LimitExpr) Reset() {
	*x = LimitExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitExpr) ProtoMessage() {}

func (x *LimitExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitExpr.ProtoReflect.Descriptor instead.
func (*LimitExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{18}
}

func (x *LimitExpr) GetAllBool() bool {
	if x != nil {
		return x.AllBool
	}
	return false
}

func (x *LimitExpr) GetAllPos() *Pos {
	if x != nil {
		return x.AllPos
	}
	return nil
}

func (x *LimitExpr) GetLimit() *Pos {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *LimitExpr) GetLimitValue() *LongValue {
	if x != nil {
		return x.LimitValue
	}
	return nil
}

func (x *LimitExpr) GetOffsetValue() *LongValue {
	if x != nil {
		return x.OffsetValue
	}
	return nil
}

type SQLSelectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectItemClause:
	//
	//	*SQLSelectItem_FieldIdents
	//	*SQLSelectItem_FieldFunction
	//	*SQLSelectItem_FieldCase
	//	*SQLSelectItem_FieldNested
	//	*SQLSelectItem_FieldUnary
	//	*SQLSelectItem_FieldBinary
	SelectItemClause isSQLSelectItem_SelectItemClause `protobuf_oneof:"SelectItemClause"`
	AliasName        *Ident                           `protobuf:"bytes,10,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
}

func (x *SQLSelectItem) Reset() {
	*x = SQLSelectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLSelectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLSelectItem) ProtoMessage() {}

func (x *SQLSelectItem) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLSelectItem.ProtoReflect.Descriptor instead.
func (*SQLSelectItem) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{19}
}

func (m *SQLSelectItem) GetSelectItemClause() isSQLSelectItem_SelectItemClause {
	if m != nil {
		return m.SelectItemClause
	}
	return nil
}

func (x *SQLSelectItem) GetFieldIdents() *CompoundIdent {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldIdents); ok {
		return x.FieldIdents
	}
	return nil
}

func (x *SQLSelectItem) GetFieldFunction() *AggFunction {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldFunction); ok {
		return x.FieldFunction
	}
	return nil
}

func (x *SQLSelectItem) GetFieldCase() *CaseExpr {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldCase); ok {
		return x.FieldCase
	}
	return nil
}

func (x *SQLSelectItem) GetFieldNested() *Nested {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldNested); ok {
		return x.FieldNested
	}
	return nil
}

func (x *SQLSelectItem) GetFieldUnary() *UnaryExpr {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldUnary); ok {
		return x.FieldUnary
	}
	return nil
}

func (x *SQLSelectItem) GetFieldBinary() *BinaryExpr {
	if x, ok := x.GetSelectItemClause().(*SQLSelectItem_FieldBinary); ok {
		return x.FieldBinary
	}
	return nil
}

func (x *SQLSelectItem) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

type isSQLSelectItem_SelectItemClause interface {
	isSQLSelectItem_SelectItemClause()
}

type SQLSelectItem_FieldIdents struct {
	FieldIdents *CompoundIdent `protobuf:"bytes,1,opt,name=FieldIdents,proto3,oneof"`
}

type SQLSelectItem_FieldFunction struct {
	FieldFunction *AggFunction `protobuf:"bytes,2,opt,name=FieldFunction,proto3,oneof"`
}

type SQLSelectItem_FieldCase struct {
	FieldCase *CaseExpr `protobuf:"bytes,3,opt,name=FieldCase,proto3,oneof"`
}

type SQLSelectItem_FieldNested struct {
	FieldNested *Nested `protobuf:"bytes,4,opt,name=FieldNested,proto3,oneof"`
}

type SQLSelectItem_FieldUnary struct {
	FieldUnary *UnaryExpr `protobuf:"bytes,5,opt,name=FieldUnary,proto3,oneof"`
}

type SQLSelectItem_FieldBinary struct {
	FieldBinary *BinaryExpr `protobuf:"bytes,6,opt,name=FieldBinary,proto3,oneof"`
}

func (*SQLSelectItem_FieldIdents) isSQLSelectItem_SelectItemClause() {}

func (*SQLSelectItem_FieldFunction) isSQLSelectItem_SelectItemClause() {}

func (*SQLSelectItem_FieldCase) isSQLSelectItem_SelectItemClause() {}

func (*SQLSelectItem_FieldNested) isSQLSelectItem_SelectItemClause() {}

func (*SQLSelectItem_FieldUnary) isSQLSelectItem_SelectItemClause() {}

func (*SQLSelectItem_FieldBinary) isSQLSelectItem_SelectItemClause() {}

type Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AST    *SQLSelectItem `protobuf:"bytes,1,opt,name=AST,proto3" json:"AST,omitempty"`
	LParen *Pos           `protobuf:"bytes,2,opt,name=LParen,proto3" json:"LParen,omitempty"`
	RParen *Pos           `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *Nested) Reset() {
	*x = Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{20}
}

func (x *Nested) GetAST() *SQLSelectItem {
	if x != nil {
		return x.AST
	}
	return nil
}

func (x *Nested) GetLParen() *Pos {
	if x != nil {
		return x.LParen
	}
	return nil
}

func (x *Nested) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type InSubQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     *CompoundIdent `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	SubQuery *QueryStmt     `protobuf:"bytes,2,opt,name=SubQuery,proto3" json:"SubQuery,omitempty"`
	Negated  bool           `protobuf:"varint,3,opt,name=Negated,proto3" json:"Negated,omitempty"`
	RParen   *Pos           `protobuf:"bytes,4,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *InSubQuery) Reset() {
	*x = InSubQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InSubQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InSubQuery) ProtoMessage() {}

func (x *InSubQuery) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InSubQuery.ProtoReflect.Descriptor instead.
func (*InSubQuery) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{21}
}

func (x *InSubQuery) GetExpr() *CompoundIdent {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *InSubQuery) GetSubQuery() *QueryStmt {
	if x != nil {
		return x.SubQuery
	}
	return nil
}

func (x *InSubQuery) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *InSubQuery) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type SQLSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistinctBool bool             `protobuf:"varint,1,opt,name=DistinctBool,proto3" json:"DistinctBool,omitempty"`
	Projection   []*SQLSelectItem `protobuf:"bytes,2,rep,name=Projection,proto3" json:"Projection,omitempty"`
	FromClause   []*QualifiedJoin `protobuf:"bytes,3,rep,name=FromClause,proto3" json:"FromClause,omitempty"`
	// Types that are assignable to WhereClause:
	//
	//	*SQLSelect_InQuery
	//	*SQLSelect_BinExpr
	WhereClause   isSQLSelect_WhereClause `protobuf_oneof:"WhereClause"`
	GroupByClause []*CompoundIdent        `protobuf:"bytes,8,rep,name=GroupByClause,proto3" json:"GroupByClause,omitempty"`
	HavingClause  *BinaryExpr             `protobuf:"bytes,9,opt,name=HavingClause,proto3" json:"HavingClause,omitempty"`
	Select        *Pos                    `protobuf:"bytes,10,opt,name=Select,proto3" json:"Select,omitempty"`
}

func (x *SQLSelect) Reset() {
	*x = SQLSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLSelect) ProtoMessage() {}

func (x *SQLSelect) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLSelect.ProtoReflect.Descriptor instead.
func (*SQLSelect) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{22}
}

func (x *SQLSelect) GetDistinctBool() bool {
	if x != nil {
		return x.DistinctBool
	}
	return false
}

func (x *SQLSelect) GetProjection() []*SQLSelectItem {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *SQLSelect) GetFromClause() []*QualifiedJoin {
	if x != nil {
		return x.FromClause
	}
	return nil
}

func (m *SQLSelect) GetWhereClause() isSQLSelect_WhereClause {
	if m != nil {
		return m.WhereClause
	}
	return nil
}

func (x *SQLSelect) GetInQuery() *InSubQuery {
	if x, ok := x.GetWhereClause().(*SQLSelect_InQuery); ok {
		return x.InQuery
	}
	return nil
}

func (x *SQLSelect) GetBinExpr() *BinaryExpr {
	if x, ok := x.GetWhereClause().(*SQLSelect_BinExpr); ok {
		return x.BinExpr
	}
	return nil
}

func (x *SQLSelect) GetGroupByClause() []*CompoundIdent {
	if x != nil {
		return x.GroupByClause
	}
	return nil
}

func (x *SQLSelect) GetHavingClause() *BinaryExpr {
	if x != nil {
		return x.HavingClause
	}
	return nil
}

func (x *SQLSelect) GetSelect() *Pos {
	if x != nil {
		return x.Select
	}
	return nil
}

type isSQLSelect_WhereClause interface {
	isSQLSelect_WhereClause()
}

type SQLSelect_InQuery struct {
	InQuery *InSubQuery `protobuf:"bytes,4,opt,name=InQuery,proto3,oneof"`
}

type SQLSelect_BinExpr struct {
	BinExpr *BinaryExpr `protobuf:"bytes,5,opt,name=BinExpr,proto3,oneof"`
}

func (*SQLSelect_InQuery) isSQLSelect_WhereClause() {}

func (*SQLSelect_BinExpr) isSQLSelect_WhereClause() {}

type SetOperationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftSide  *SQLSelect        `protobuf:"bytes,1,opt,name=LeftSide,proto3" json:"LeftSide,omitempty"`
	AllBool   bool              `protobuf:"varint,2,opt,name=AllBool,proto3" json:"AllBool,omitempty"`
	Op        *SetOperator      `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`
	RightSide *SetOperationExpr `protobuf:"bytes,4,opt,name=RightSide,proto3" json:"RightSide,omitempty"`
}

func (x *SetOperationExpr) Reset() {
	*x = SetOperationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperationExpr) ProtoMessage() {}

func (x *SetOperationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperationExpr.ProtoReflect.Descriptor instead.
func (*SetOperationExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{23}
}

func (x *SetOperationExpr) GetLeftSide() *SQLSelect {
	if x != nil {
		return x.LeftSide
	}
	return nil
}

func (x *SetOperationExpr) GetAllBool() bool {
	if x != nil {
		return x.AllBool
	}
	return false
}

func (x *SetOperationExpr) GetOp() *SetOperator {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *SetOperationExpr) GetRightSide() *SetOperationExpr {
	if x != nil {
		return x.RightSide
	}
	return nil
}

type QueryStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	With            *Pos              `protobuf:"bytes,1,opt,name=With,proto3" json:"With,omitempty"`
	CTEs            []*QueryStmt_CTE  `protobuf:"bytes,2,rep,name=CTEs,proto3" json:"CTEs,omitempty"`
	Body            *SetOperationExpr `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
	OrderBy         []*OrderByExpr    `protobuf:"bytes,5,rep,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	LimitExpression *LimitExpr        `protobuf:"bytes,6,opt,name=LimitExpression,proto3" json:"LimitExpression,omitempty"`
}

func (x *QueryStmt) Reset() {
	*x = QueryStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt) ProtoMessage() {}

func (x *QueryStmt) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt.ProtoReflect.Descriptor instead.
func (*QueryStmt) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{24}
}

func (x *QueryStmt) GetWith() *Pos {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *QueryStmt) GetCTEs() []*QueryStmt_CTE {
	if x != nil {
		return x.CTEs
	}
	return nil
}

func (x *QueryStmt) GetBody() *SetOperationExpr {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *QueryStmt) GetOrderBy() []*OrderByExpr {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *QueryStmt) GetLimitExpression() *LimitExpr {
	if x != nil {
		return x.LimitExpression
	}
	return nil
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To         *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	IsUnsigned bool `protobuf:"varint,3,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos `protobuf:"bytes,4,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{25}
}

func (x *BigInt) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BigInt) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BigInt) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *BigInt) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type SmallInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To         *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	IsUnsigned bool `protobuf:"varint,3,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos `protobuf:"bytes,4,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *SmallInt) Reset() {
	*x = SmallInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallInt) ProtoMessage() {}

func (x *SmallInt) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallInt.ProtoReflect.Descriptor instead.
func (*SmallInt) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{26}
}

func (x *SmallInt) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SmallInt) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SmallInt) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *SmallInt) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To         *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	IsUnsigned bool `protobuf:"varint,3,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos `protobuf:"bytes,4,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *Int) Reset() {
	*x = Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int) ProtoMessage() {}

func (x *Int) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int.ProtoReflect.Descriptor instead.
func (*Int) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{27}
}

func (x *Int) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Int) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Int) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *Int) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Double) Reset() {
	*x = Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Double) ProtoMessage() {}

func (x *Double) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Double.ProtoReflect.Descriptor instead.
func (*Double) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{28}
}

func (x *Double) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Double) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Real struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To         *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	IsUnsigned bool `protobuf:"varint,3,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos `protobuf:"bytes,4,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *Real) Reset() {
	*x = Real{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Real) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Real) ProtoMessage() {}

func (x *Real) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Real.ProtoReflect.Descriptor instead.
func (*Real) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{29}
}

func (x *Real) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Real) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Real) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *Real) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size       uint32 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	From       *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To         *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	IsUnsigned bool   `protobuf:"varint,4,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos   `protobuf:"bytes,5,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *Float) Reset() {
	*x = Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float) ProtoMessage() {}

func (x *Float) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float.ProtoReflect.Descriptor instead.
func (*Float) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{30}
}

func (x *Float) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Float) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Float) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Float) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *Float) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision  uint32 `protobuf:"varint,1,opt,name=Precision,proto3" json:"Precision,omitempty"`
	Scale      uint32 `protobuf:"varint,2,opt,name=Scale,proto3" json:"Scale,omitempty"`
	Numeric    *Pos   `protobuf:"bytes,3,opt,name=Numeric,proto3" json:"Numeric,omitempty"`
	RParen     *Pos   `protobuf:"bytes,4,opt,name=RParen,proto3" json:"RParen,omitempty"`
	IsUnsigned bool   `protobuf:"varint,5,opt,name=IsUnsigned,proto3" json:"IsUnsigned,omitempty"`
	Unsigned   *Pos   `protobuf:"bytes,6,opt,name=Unsigned,proto3" json:"Unsigned,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{31}
}

func (x *Decimal) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *Decimal) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *Decimal) GetNumeric() *Pos {
	if x != nil {
		return x.Numeric
	}
	return nil
}

func (x *Decimal) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

func (x *Decimal) GetIsUnsigned() bool {
	if x != nil {
		return x.IsUnsigned
	}
	return false
}

func (x *Decimal) GetUnsigned() *Pos {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{32}
}

func (x *Boolean) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Boolean) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type CharType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint32 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	From *Pos   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *CharType) Reset() {
	*x = CharType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharType) ProtoMessage() {}

func (x *CharType) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharType.ProtoReflect.Descriptor instead.
func (*CharType) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{33}
}

func (x *CharType) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CharType) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CharType) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type VarcharType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size      uint32 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	Character *Pos   `protobuf:"bytes,2,opt,name=Character,proto3" json:"Character,omitempty"`
	Varying   *Pos   `protobuf:"bytes,3,opt,name=Varying,proto3" json:"Varying,omitempty"`
	RParen    *Pos   `protobuf:"bytes,4,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *VarcharType) Reset() {
	*x = VarcharType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarcharType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarcharType) ProtoMessage() {}

func (x *VarcharType) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarcharType.ProtoReflect.Descriptor instead.
func (*VarcharType) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{34}
}

func (x *VarcharType) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VarcharType) GetCharacter() *Pos {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *VarcharType) GetVarying() *Pos {
	if x != nil {
		return x.Varying
	}
	return nil
}

func (x *VarcharType) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{35}
}

func (x *Time) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Time) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithTimeZone bool `protobuf:"varint,1,opt,name=WithTimeZone,proto3" json:"WithTimeZone,omitempty"`
	Timestamp    *Pos `protobuf:"bytes,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Zone         *Pos `protobuf:"bytes,3,opt,name=Zone,proto3" json:"Zone,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{36}
}

func (x *Timestamp) GetWithTimeZone() bool {
	if x != nil {
		return x.WithTimeZone
	}
	return false
}

func (x *Timestamp) GetTimestamp() *Pos {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Timestamp) GetZone() *Pos {
	if x != nil {
		return x.Zone
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{37}
}

func (x *Date) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Date) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Bytea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Bytea) Reset() {
	*x = Bytea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytea) ProtoMessage() {}

func (x *Bytea) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytea.ProtoReflect.Descriptor instead.
func (*Bytea) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{38}
}

func (x *Bytea) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Bytea) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{39}
}

func (x *Text) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Text) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Regclass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *Regclass) Reset() {
	*x = Regclass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regclass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regclass) ProtoMessage() {}

func (x *Regclass) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regclass.ProtoReflect.Descriptor instead.
func (*Regclass) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{40}
}

func (x *Regclass) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Regclass) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Pos `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   *Pos `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{41}
}

func (x *UUID) GetFrom() *Pos {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *UUID) GetTo() *Pos {
	if x != nil {
		return x.To
	}
	return nil
}

type Custom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty *CompoundIdent `protobuf:"bytes,1,opt,name=Ty,proto3" json:"Ty,omitempty"`
}

func (x *Custom) Reset() {
	*x = Custom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Custom) ProtoMessage() {}

func (x *Custom) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Custom.ProtoReflect.Descriptor instead.
func (*Custom) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{42}
}

func (x *Custom) GetTy() *CompoundIdent {
	if x != nil {
		return x.Ty
	}
	return nil
}

type CheckColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr   *BinaryExpr `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	Check  *Pos        `protobuf:"bytes,2,opt,name=Check,proto3" json:"Check,omitempty"`
	RParen *Pos        `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *CheckColumnSpec) Reset() {
	*x = CheckColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckColumnSpec) ProtoMessage() {}

func (x *CheckColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckColumnSpec.ProtoReflect.Descriptor instead.
func (*CheckColumnSpec) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{43}
}

func (x *CheckColumnSpec) GetExpr() *BinaryExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CheckColumnSpec) GetCheck() *Pos {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *CheckColumnSpec) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type ReferencesColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References *Pos        `protobuf:"bytes,1,opt,name=References,proto3" json:"References,omitempty"`
	RParen     *Pos        `protobuf:"bytes,2,opt,name=RParen,proto3" json:"RParen,omitempty"`
	TableName  *ObjectName `protobuf:"bytes,3,opt,name=TableName,proto3" json:"TableName,omitempty"`
	Columns    []*Ident    `protobuf:"bytes,4,rep,name=Columns,proto3" json:"Columns,omitempty"`
}

func (x *ReferencesColumnSpec) Reset() {
	*x = ReferencesColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencesColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencesColumnSpec) ProtoMessage() {}

func (x *ReferencesColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencesColumnSpec.ProtoReflect.Descriptor instead.
func (*ReferencesColumnSpec) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{44}
}

func (x *ReferencesColumnSpec) GetReferences() *Pos {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ReferencesColumnSpec) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

func (x *ReferencesColumnSpec) GetTableName() *ObjectName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ReferencesColumnSpec) GetColumns() []*Ident {
	if x != nil {
		return x.Columns
	}
	return nil
}

type UniqueColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrimaryKey bool `protobuf:"varint,1,opt,name=IsPrimaryKey,proto3" json:"IsPrimaryKey,omitempty"`
	Primary      *Pos `protobuf:"bytes,2,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Key          *Pos `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Unique       *Pos `protobuf:"bytes,4,opt,name=Unique,proto3" json:"Unique,omitempty"`
}

func (x *UniqueColumnSpec) Reset() {
	*x = UniqueColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueColumnSpec) ProtoMessage() {}

func (x *UniqueColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueColumnSpec.ProtoReflect.Descriptor instead.
func (*UniqueColumnSpec) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{45}
}

func (x *UniqueColumnSpec) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *UniqueColumnSpec) GetPrimary() *Pos {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *UniqueColumnSpec) GetKey() *Pos {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UniqueColumnSpec) GetUnique() *Pos {
	if x != nil {
		return x.Unique
	}
	return nil
}

type NotNullColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Not  *Pos `protobuf:"bytes,1,opt,name=Not,proto3" json:"Not,omitempty"`
	Null *Pos `protobuf:"bytes,2,opt,name=Null,proto3" json:"Null,omitempty"`
}

func (x *NotNullColumnSpec) Reset() {
	*x = NotNullColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotNullColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotNullColumnSpec) ProtoMessage() {}

func (x *NotNullColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotNullColumnSpec.ProtoReflect.Descriptor instead.
func (*NotNullColumnSpec) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{46}
}

func (x *NotNullColumnSpec) GetNot() *Pos {
	if x != nil {
		return x.Not
	}
	return nil
}

func (x *NotNullColumnSpec) GetNull() *Pos {
	if x != nil {
		return x.Null
	}
	return nil
}

type ColumnConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *Ident `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Constraint *Pos   `protobuf:"bytes,2,opt,name=Constraint,proto3" json:"Constraint,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*ColumnConstraint_UniqueSpec
	//	*ColumnConstraint_CheckSpec
	//	*ColumnConstraint_ReferenceSpec
	//	*ColumnConstraint_NotNullSpec
	Spec isColumnConstraint_Spec `protobuf_oneof:"Spec"`
}

func (x *ColumnConstraint) Reset() {
	*x = ColumnConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnConstraint) ProtoMessage() {}

func (x *ColumnConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnConstraint.ProtoReflect.Descriptor instead.
func (*ColumnConstraint) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{47}
}

func (x *ColumnConstraint) GetName() *Ident {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ColumnConstraint) GetConstraint() *Pos {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (m *ColumnConstraint) GetSpec() isColumnConstraint_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *ColumnConstraint) GetUniqueSpec() *UniqueColumnSpec {
	if x, ok := x.GetSpec().(*ColumnConstraint_UniqueSpec); ok {
		return x.UniqueSpec
	}
	return nil
}

func (x *ColumnConstraint) GetCheckSpec() *CheckColumnSpec {
	if x, ok := x.GetSpec().(*ColumnConstraint_CheckSpec); ok {
		return x.CheckSpec
	}
	return nil
}

func (x *ColumnConstraint) GetReferenceSpec() *ReferencesColumnSpec {
	if x, ok := x.GetSpec().(*ColumnConstraint_ReferenceSpec); ok {
		return x.ReferenceSpec
	}
	return nil
}

func (x *ColumnConstraint) GetNotNullSpec() *NotNullColumnSpec {
	if x, ok := x.GetSpec().(*ColumnConstraint_NotNullSpec); ok {
		return x.NotNullSpec
	}
	return nil
}

type isColumnConstraint_Spec interface {
	isColumnConstraint_Spec()
}

type ColumnConstraint_UniqueSpec struct {
	UniqueSpec *UniqueColumnSpec `protobuf:"bytes,3,opt,name=UniqueSpec,proto3,oneof"`
}

type ColumnConstraint_CheckSpec struct {
	CheckSpec *CheckColumnSpec `protobuf:"bytes,4,opt,name=CheckSpec,proto3,oneof"`
}

type ColumnConstraint_ReferenceSpec struct {
	ReferenceSpec *ReferencesColumnSpec `protobuf:"bytes,5,opt,name=ReferenceSpec,proto3,oneof"`
}

type ColumnConstraint_NotNullSpec struct {
	NotNullSpec *NotNullColumnSpec `protobuf:"bytes,6,opt,name=NotNullSpec,proto3,oneof"`
}

func (*ColumnConstraint_UniqueSpec) isColumnConstraint_Spec() {}

func (*ColumnConstraint_CheckSpec) isColumnConstraint_Spec() {}

func (*ColumnConstraint_ReferenceSpec) isColumnConstraint_Spec() {}

func (*ColumnConstraint_NotNullSpec) isColumnConstraint_Spec() {}

type AutoIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auto      *Pos `protobuf:"bytes,1,opt,name=Auto,proto3" json:"Auto,omitempty"`
	Increment *Pos `protobuf:"bytes,2,opt,name=Increment,proto3" json:"Increment,omitempty"`
}

func (x *AutoIncrement) Reset() {
	*x = AutoIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoIncrement) ProtoMessage() {}

func (x *AutoIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoIncrement.ProtoReflect.Descriptor instead.
func (*AutoIncrement) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{48}
}

func (x *AutoIncrement) GetAuto() *Pos {
	if x != nil {
		return x.Auto
	}
	return nil
}

func (x *AutoIncrement) GetIncrement() *Pos {
	if x != nil {
		return x.Increment
	}
	return nil
}

type MyDataTypeDecoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Automent *AutoIncrement `protobuf:"bytes,1,opt,name=Automent,proto3" json:"Automent,omitempty"`
}

func (x *MyDataTypeDecoration) Reset() {
	*x = MyDataTypeDecoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyDataTypeDecoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyDataTypeDecoration) ProtoMessage() {}

func (x *MyDataTypeDecoration) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyDataTypeDecoration.ProtoReflect.Descriptor instead.
func (*MyDataTypeDecoration) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{49}
}

func (x *MyDataTypeDecoration) GetAutoment() *AutoIncrement {
	if x != nil {
		return x.Automent
	}
	return nil
}

type ColumnDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *Ident `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Types that are assignable to DataType:
	//
	//	*ColumnDef_IntData
	//	*ColumnDef_SmallIntData
	//	*ColumnDef_BigIntData
	//	*ColumnDef_CharData
	//	*ColumnDef_VarcharData
	//	*ColumnDef_UUIDData
	//	*ColumnDef_TimestampData
	DataType isColumnDef_DataType `protobuf_oneof:"DataType"`
	// Types that are assignable to Default:
	//
	//	*ColumnDef_StringDefault
	//	*ColumnDef_LongDefault
	//	*ColumnDef_IdentDefault
	Default     isColumnDef_Default     `protobuf_oneof:"Default"`
	MyDecos     []*MyDataTypeDecoration `protobuf:"bytes,41,rep,name=MyDecos,proto3" json:"MyDecos,omitempty"`
	Constraints []*ColumnConstraint     `protobuf:"bytes,42,rep,name=Constraints,proto3" json:"Constraints,omitempty"`
}

func (x *ColumnDef) Reset() {
	*x = ColumnDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDef) ProtoMessage() {}

func (x *ColumnDef) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDef.ProtoReflect.Descriptor instead.
func (*ColumnDef) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{50}
}

func (x *ColumnDef) GetName() *Ident {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *ColumnDef) GetDataType() isColumnDef_DataType {
	if m != nil {
		return m.DataType
	}
	return nil
}

func (x *ColumnDef) GetIntData() *Int {
	if x, ok := x.GetDataType().(*ColumnDef_IntData); ok {
		return x.IntData
	}
	return nil
}

func (x *ColumnDef) GetSmallIntData() *SmallInt {
	if x, ok := x.GetDataType().(*ColumnDef_SmallIntData); ok {
		return x.SmallIntData
	}
	return nil
}

func (x *ColumnDef) GetBigIntData() *BigInt {
	if x, ok := x.GetDataType().(*ColumnDef_BigIntData); ok {
		return x.BigIntData
	}
	return nil
}

func (x *ColumnDef) GetCharData() *CharType {
	if x, ok := x.GetDataType().(*ColumnDef_CharData); ok {
		return x.CharData
	}
	return nil
}

func (x *ColumnDef) GetVarcharData() *VarcharType {
	if x, ok := x.GetDataType().(*ColumnDef_VarcharData); ok {
		return x.VarcharData
	}
	return nil
}

func (x *ColumnDef) GetUUIDData() *UUID {
	if x, ok := x.GetDataType().(*ColumnDef_UUIDData); ok {
		return x.UUIDData
	}
	return nil
}

func (x *ColumnDef) GetTimestampData() *Timestamp {
	if x, ok := x.GetDataType().(*ColumnDef_TimestampData); ok {
		return x.TimestampData
	}
	return nil
}

func (m *ColumnDef) GetDefault() isColumnDef_Default {
	if m != nil {
		return m.Default
	}
	return nil
}

func (x *ColumnDef) GetStringDefault() *SingleQuotedString {
	if x, ok := x.GetDefault().(*ColumnDef_StringDefault); ok {
		return x.StringDefault
	}
	return nil
}

func (x *ColumnDef) GetLongDefault() *LongValue {
	if x, ok := x.GetDefault().(*ColumnDef_LongDefault); ok {
		return x.LongDefault
	}
	return nil
}

func (x *ColumnDef) GetIdentDefault() *Ident {
	if x, ok := x.GetDefault().(*ColumnDef_IdentDefault); ok {
		return x.IdentDefault
	}
	return nil
}

func (x *ColumnDef) GetMyDecos() []*MyDataTypeDecoration {
	if x != nil {
		return x.MyDecos
	}
	return nil
}

func (x *ColumnDef) GetConstraints() []*ColumnConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type isColumnDef_DataType interface {
	isColumnDef_DataType()
}

type ColumnDef_IntData struct {
	IntData *Int `protobuf:"bytes,2,opt,name=IntData,proto3,oneof"`
}

type ColumnDef_SmallIntData struct {
	SmallIntData *SmallInt `protobuf:"bytes,3,opt,name=SmallIntData,proto3,oneof"`
}

type ColumnDef_BigIntData struct {
	BigIntData *BigInt `protobuf:"bytes,4,opt,name=BigIntData,proto3,oneof"`
}

type ColumnDef_CharData struct {
	CharData *CharType `protobuf:"bytes,5,opt,name=CharData,proto3,oneof"`
}

type ColumnDef_VarcharData struct {
	VarcharData *VarcharType `protobuf:"bytes,6,opt,name=VarcharData,proto3,oneof"`
}

type ColumnDef_UUIDData struct {
	UUIDData *UUID `protobuf:"bytes,7,opt,name=UUIDData,proto3,oneof"`
}

type ColumnDef_TimestampData struct {
	TimestampData *Timestamp `protobuf:"bytes,8,opt,name=TimestampData,proto3,oneof"`
}

func (*ColumnDef_IntData) isColumnDef_DataType() {}

func (*ColumnDef_SmallIntData) isColumnDef_DataType() {}

func (*ColumnDef_BigIntData) isColumnDef_DataType() {}

func (*ColumnDef_CharData) isColumnDef_DataType() {}

func (*ColumnDef_VarcharData) isColumnDef_DataType() {}

func (*ColumnDef_UUIDData) isColumnDef_DataType() {}

func (*ColumnDef_TimestampData) isColumnDef_DataType() {}

type isColumnDef_Default interface {
	isColumnDef_Default()
}

type ColumnDef_StringDefault struct {
	StringDefault *SingleQuotedString `protobuf:"bytes,21,opt,name=StringDefault,proto3,oneof"`
}

type ColumnDef_LongDefault struct {
	LongDefault *LongValue `protobuf:"bytes,22,opt,name=LongDefault,proto3,oneof"`
}

type ColumnDef_IdentDefault struct {
	IdentDefault *Ident `protobuf:"bytes,23,opt,name=IdentDefault,proto3,oneof"`
}

func (*ColumnDef_StringDefault) isColumnDef_Default() {}

func (*ColumnDef_LongDefault) isColumnDef_Default() {}

func (*ColumnDef_IdentDefault) isColumnDef_Default() {}

type ReferenceKeyExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *Ident   `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`
	Columns   []*Ident `protobuf:"bytes,2,rep,name=Columns,proto3" json:"Columns,omitempty"`
	RParen    *Pos     `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *ReferenceKeyExpr) Reset() {
	*x = ReferenceKeyExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceKeyExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceKeyExpr) ProtoMessage() {}

func (x *ReferenceKeyExpr) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceKeyExpr.ProtoReflect.Descriptor instead.
func (*ReferenceKeyExpr) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{51}
}

func (x *ReferenceKeyExpr) GetTableName() *Ident {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ReferenceKeyExpr) GetColumns() []*Ident {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ReferenceKeyExpr) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

type ReferentialTableConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foreign *Pos              `protobuf:"bytes,1,opt,name=Foreign,proto3" json:"Foreign,omitempty"`
	Columns []*Ident          `protobuf:"bytes,2,rep,name=Columns,proto3" json:"Columns,omitempty"`
	KeyExpr *ReferenceKeyExpr `protobuf:"bytes,3,opt,name=KeyExpr,proto3" json:"KeyExpr,omitempty"`
}

func (x *ReferentialTableConstraint) Reset() {
	*x = ReferentialTableConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferentialTableConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferentialTableConstraint) ProtoMessage() {}

func (x *ReferentialTableConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferentialTableConstraint.ProtoReflect.Descriptor instead.
func (*ReferentialTableConstraint) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{52}
}

func (x *ReferentialTableConstraint) GetForeign() *Pos {
	if x != nil {
		return x.Foreign
	}
	return nil
}

func (x *ReferentialTableConstraint) GetColumns() []*Ident {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ReferentialTableConstraint) GetKeyExpr() *ReferenceKeyExpr {
	if x != nil {
		return x.KeyExpr
	}
	return nil
}

type CheckTableConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check  *Pos        `protobuf:"bytes,1,opt,name=Check,proto3" json:"Check,omitempty"`
	RParen *Pos        `protobuf:"bytes,2,opt,name=RParen,proto3" json:"RParen,omitempty"`
	Expr   *BinaryExpr `protobuf:"bytes,3,opt,name=Expr,proto3" json:"Expr,omitempty"`
}

func (x *CheckTableConstraint) Reset() {
	*x = CheckTableConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTableConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTableConstraint) ProtoMessage() {}

func (x *CheckTableConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTableConstraint.ProtoReflect.Descriptor instead.
func (*CheckTableConstraint) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{53}
}

func (x *CheckTableConstraint) GetCheck() *Pos {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *CheckTableConstraint) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

func (x *CheckTableConstraint) GetExpr() *BinaryExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type UniqueTableConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary   *Pos     `protobuf:"bytes,1,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Unique    *Pos     `protobuf:"bytes,2,opt,name=Unique,proto3" json:"Unique,omitempty"`
	RParen    *Pos     `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
	IsPrimary bool     `protobuf:"varint,4,opt,name=IsPrimary,proto3" json:"IsPrimary,omitempty"`
	Columns   []*Ident `protobuf:"bytes,5,rep,name=Columns,proto3" json:"Columns,omitempty"`
}

func (x *UniqueTableConstraint) Reset() {
	*x = UniqueTableConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueTableConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueTableConstraint) ProtoMessage() {}

func (x *UniqueTableConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueTableConstraint.ProtoReflect.Descriptor instead.
func (*UniqueTableConstraint) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{54}
}

func (x *UniqueTableConstraint) GetPrimary() *Pos {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *UniqueTableConstraint) GetUnique() *Pos {
	if x != nil {
		return x.Unique
	}
	return nil
}

func (x *UniqueTableConstraint) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

func (x *UniqueTableConstraint) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *UniqueTableConstraint) GetColumns() []*Ident {
	if x != nil {
		return x.Columns
	}
	return nil
}

type TableConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraint *Pos   `protobuf:"bytes,1,opt,name=Constraint,proto3" json:"Constraint,omitempty"`
	Name       *Ident `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*TableConstraint_SpecReference
	//	*TableConstraint_SpecCheck
	//	*TableConstraint_SpecUnique
	Spec isTableConstraint_Spec `protobuf_oneof:"Spec"`
}

func (x *TableConstraint) Reset() {
	*x = TableConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConstraint) ProtoMessage() {}

func (x *TableConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConstraint.ProtoReflect.Descriptor instead.
func (*TableConstraint) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{55}
}

func (x *TableConstraint) GetConstraint() *Pos {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *TableConstraint) GetName() *Ident {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *TableConstraint) GetSpec() isTableConstraint_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *TableConstraint) GetSpecReference() *ReferentialTableConstraint {
	if x, ok := x.GetSpec().(*TableConstraint_SpecReference); ok {
		return x.SpecReference
	}
	return nil
}

func (x *TableConstraint) GetSpecCheck() *CheckTableConstraint {
	if x, ok := x.GetSpec().(*TableConstraint_SpecCheck); ok {
		return x.SpecCheck
	}
	return nil
}

func (x *TableConstraint) GetSpecUnique() *UniqueTableConstraint {
	if x, ok := x.GetSpec().(*TableConstraint_SpecUnique); ok {
		return x.SpecUnique
	}
	return nil
}

type isTableConstraint_Spec interface {
	isTableConstraint_Spec()
}

type TableConstraint_SpecReference struct {
	SpecReference *ReferentialTableConstraint `protobuf:"bytes,3,opt,name=SpecReference,proto3,oneof"`
}

type TableConstraint_SpecCheck struct {
	SpecCheck *CheckTableConstraint `protobuf:"bytes,4,opt,name=SpecCheck,proto3,oneof"`
}

type TableConstraint_SpecUnique struct {
	SpecUnique *UniqueTableConstraint `protobuf:"bytes,5,opt,name=SpecUnique,proto3,oneof"`
}

func (*TableConstraint_SpecReference) isTableConstraint_Spec() {}

func (*TableConstraint_SpecCheck) isTableConstraint_Spec() {}

func (*TableConstraint_SpecUnique) isTableConstraint_Spec() {}

type TableElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TableElementClause:
	//
	//	*TableElement_ColumnDefElement
	//	*TableElement_TableConstraintElement
	TableElementClause isTableElement_TableElementClause `protobuf_oneof:"TableElementClause"`
}

func (x *TableElement) Reset() {
	*x = TableElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableElement) ProtoMessage() {}

func (x *TableElement) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableElement.ProtoReflect.Descriptor instead.
func (*TableElement) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{56}
}

func (m *TableElement) GetTableElementClause() isTableElement_TableElementClause {
	if m != nil {
		return m.TableElementClause
	}
	return nil
}

func (x *TableElement) GetColumnDefElement() *ColumnDef {
	if x, ok := x.GetTableElementClause().(*TableElement_ColumnDefElement); ok {
		return x.ColumnDefElement
	}
	return nil
}

func (x *TableElement) GetTableConstraintElement() *TableConstraint {
	if x, ok := x.GetTableElementClause().(*TableElement_TableConstraintElement); ok {
		return x.TableConstraintElement
	}
	return nil
}

type isTableElement_TableElementClause interface {
	isTableElement_TableElementClause()
}

type TableElement_ColumnDefElement struct {
	ColumnDefElement *ColumnDef `protobuf:"bytes,1,opt,name=ColumnDefElement,proto3,oneof"`
}

type TableElement_TableConstraintElement struct {
	TableConstraintElement *TableConstraint `protobuf:"bytes,2,opt,name=TableConstraintElement,proto3,oneof"`
}

func (*TableElement_ColumnDefElement) isTableElement_TableElementClause() {}

func (*TableElement_TableConstraintElement) isTableElement_TableElementClause() {}

type MyEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Engine *Pos   `protobuf:"bytes,1,opt,name=Engine,proto3" json:"Engine,omitempty"`
	Equal  bool   `protobuf:"varint,2,opt,name=Equal,proto3" json:"Equal,omitempty"`
	Name   *Ident `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MyEngine) Reset() {
	*x = MyEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyEngine) ProtoMessage() {}

func (x *MyEngine) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyEngine.ProtoReflect.Descriptor instead.
func (*MyEngine) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{57}
}

func (x *MyEngine) GetEngine() *Pos {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *MyEngine) GetEqual() bool {
	if x != nil {
		return x.Equal
	}
	return false
}

func (x *MyEngine) GetName() *Ident {
	if x != nil {
		return x.Name
	}
	return nil
}

type MyCharset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDefault bool   `protobuf:"varint,1,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	Default   *Pos   `protobuf:"bytes,2,opt,name=Default,proto3" json:"Default,omitempty"`
	Charset   *Pos   `protobuf:"bytes,3,opt,name=Charset,proto3" json:"Charset,omitempty"`
	Equal     bool   `protobuf:"varint,4,opt,name=Equal,proto3" json:"Equal,omitempty"`
	Name      *Ident `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MyCharset) Reset() {
	*x = MyCharset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCharset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCharset) ProtoMessage() {}

func (x *MyCharset) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCharset.ProtoReflect.Descriptor instead.
func (*MyCharset) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{58}
}

func (x *MyCharset) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *MyCharset) GetDefault() *Pos {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *MyCharset) GetCharset() *Pos {
	if x != nil {
		return x.Charset
	}
	return nil
}

func (x *MyCharset) GetEqual() bool {
	if x != nil {
		return x.Equal
	}
	return false
}

func (x *MyCharset) GetName() *Ident {
	if x != nil {
		return x.Name
	}
	return nil
}

type TableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TableOptionClause:
	//
	//	*TableOption_MyEngineOption
	//	*TableOption_MyCharsetOption
	TableOptionClause isTableOption_TableOptionClause `protobuf_oneof:"TableOptionClause"`
}

func (x *TableOption) Reset() {
	*x = TableOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOption) ProtoMessage() {}

func (x *TableOption) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOption.ProtoReflect.Descriptor instead.
func (*TableOption) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{59}
}

func (m *TableOption) GetTableOptionClause() isTableOption_TableOptionClause {
	if m != nil {
		return m.TableOptionClause
	}
	return nil
}

func (x *TableOption) GetMyEngineOption() *MyEngine {
	if x, ok := x.GetTableOptionClause().(*TableOption_MyEngineOption); ok {
		return x.MyEngineOption
	}
	return nil
}

func (x *TableOption) GetMyCharsetOption() *MyCharset {
	if x, ok := x.GetTableOptionClause().(*TableOption_MyCharsetOption); ok {
		return x.MyCharsetOption
	}
	return nil
}

type isTableOption_TableOptionClause interface {
	isTableOption_TableOptionClause()
}

type TableOption_MyEngineOption struct {
	MyEngineOption *MyEngine `protobuf:"bytes,1,opt,name=MyEngineOption,proto3,oneof"`
}

type TableOption_MyCharsetOption struct {
	MyCharsetOption *MyCharset `protobuf:"bytes,2,opt,name=MyCharsetOption,proto3,oneof"`
}

func (*TableOption_MyEngineOption) isTableOption_TableOptionClause() {}

func (*TableOption_MyCharsetOption) isTableOption_TableOptionClause() {}

type CreateTableStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Create    *Pos            `protobuf:"bytes,1,opt,name=Create,proto3" json:"Create,omitempty"`
	Name      *ObjectName     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Elements  []*TableElement `protobuf:"bytes,3,rep,name=Elements,proto3" json:"Elements,omitempty"`
	Location  string          `protobuf:"bytes,4,opt,name=Location,proto3" json:"Location,omitempty"`
	NotExists bool            `protobuf:"varint,5,opt,name=NotExists,proto3" json:"NotExists,omitempty"`
	Options   []*TableOption  `protobuf:"bytes,6,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *CreateTableStmt) Reset() {
	*x = CreateTableStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableStmt) ProtoMessage() {}

func (x *CreateTableStmt) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableStmt.ProtoReflect.Descriptor instead.
func (*CreateTableStmt) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{60}
}

func (x *CreateTableStmt) GetCreate() *Pos {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *CreateTableStmt) GetName() *ObjectName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateTableStmt) GetElements() []*TableElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *CreateTableStmt) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateTableStmt) GetNotExists() bool {
	if x != nil {
		return x.NotExists
	}
	return false
}

func (x *CreateTableStmt) GetOptions() []*TableOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateIndexStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Create      *Pos        `protobuf:"bytes,1,opt,name=Create,proto3" json:"Create,omitempty"`
	TableName   *ObjectName `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
	IsUnique    bool        `protobuf:"varint,3,opt,name=IsUnique,proto3" json:"IsUnique,omitempty"`
	IndexName   *Ident      `protobuf:"bytes,4,opt,name=IndexName,proto3" json:"IndexName,omitempty"`
	MethodName  *Ident      `protobuf:"bytes,5,opt,name=MethodName,proto3" json:"MethodName,omitempty"`
	ColumnNames []*Ident    `protobuf:"bytes,6,rep,name=ColumnNames,proto3" json:"ColumnNames,omitempty"`
	RParen      *Pos        `protobuf:"bytes,7,opt,name=RParen,proto3" json:"RParen,omitempty"`
	// Types that are assignable to Selection:
	//
	//	*CreateIndexStmt_InQuery
	//	*CreateIndexStmt_BinExpr
	Selection isCreateIndexStmt_Selection `protobuf_oneof:"Selection"`
}

func (x *CreateIndexStmt) Reset() {
	*x = CreateIndexStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexStmt) ProtoMessage() {}

func (x *CreateIndexStmt) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexStmt.ProtoReflect.Descriptor instead.
func (*CreateIndexStmt) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{61}
}

func (x *CreateIndexStmt) GetCreate() *Pos {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *CreateIndexStmt) GetTableName() *ObjectName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *CreateIndexStmt) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *CreateIndexStmt) GetIndexName() *Ident {
	if x != nil {
		return x.IndexName
	}
	return nil
}

func (x *CreateIndexStmt) GetMethodName() *Ident {
	if x != nil {
		return x.MethodName
	}
	return nil
}

func (x *CreateIndexStmt) GetColumnNames() []*Ident {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *CreateIndexStmt) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

func (m *CreateIndexStmt) GetSelection() isCreateIndexStmt_Selection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (x *CreateIndexStmt) GetInQuery() *InSubQuery {
	if x, ok := x.GetSelection().(*CreateIndexStmt_InQuery); ok {
		return x.InQuery
	}
	return nil
}

func (x *CreateIndexStmt) GetBinExpr() *BinaryExpr {
	if x, ok := x.GetSelection().(*CreateIndexStmt_BinExpr); ok {
		return x.BinExpr
	}
	return nil
}

type isCreateIndexStmt_Selection interface {
	isCreateIndexStmt_Selection()
}

type CreateIndexStmt_InQuery struct {
	InQuery *InSubQuery `protobuf:"bytes,8,opt,name=InQuery,proto3,oneof"`
}

type CreateIndexStmt_BinExpr struct {
	BinExpr *BinaryExpr `protobuf:"bytes,9,opt,name=BinExpr,proto3,oneof"`
}

func (*CreateIndexStmt_InQuery) isCreateIndexStmt_Selection() {}

func (*CreateIndexStmt_BinExpr) isCreateIndexStmt_Selection() {}

type AggFunction_ArgsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ArgsClause:
	//
	//	*AggFunction_ArgsMessage_FieldIdents
	//	*AggFunction_ArgsMessage_FieldFunction
	//	*AggFunction_ArgsMessage_FieldCase
	ArgsClause isAggFunction_ArgsMessage_ArgsClause `protobuf_oneof:"ArgsClause"`
}

func (x *AggFunction_ArgsMessage) Reset() {
	*x = AggFunction_ArgsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggFunction_ArgsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggFunction_ArgsMessage) ProtoMessage() {}

func (x *AggFunction_ArgsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggFunction_ArgsMessage.ProtoReflect.Descriptor instead.
func (*AggFunction_ArgsMessage) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{14, 0}
}

func (m *AggFunction_ArgsMessage) GetArgsClause() isAggFunction_ArgsMessage_ArgsClause {
	if m != nil {
		return m.ArgsClause
	}
	return nil
}

func (x *AggFunction_ArgsMessage) GetFieldIdents() *CompoundIdent {
	if x, ok := x.GetArgsClause().(*AggFunction_ArgsMessage_FieldIdents); ok {
		return x.FieldIdents
	}
	return nil
}

func (x *AggFunction_ArgsMessage) GetFieldFunction() *AggFunction {
	if x, ok := x.GetArgsClause().(*AggFunction_ArgsMessage_FieldFunction); ok {
		return x.FieldFunction
	}
	return nil
}

func (x *AggFunction_ArgsMessage) GetFieldCase() *CaseExpr {
	if x, ok := x.GetArgsClause().(*AggFunction_ArgsMessage_FieldCase); ok {
		return x.FieldCase
	}
	return nil
}

type isAggFunction_ArgsMessage_ArgsClause interface {
	isAggFunction_ArgsMessage_ArgsClause()
}

type AggFunction_ArgsMessage_FieldIdents struct {
	FieldIdents *CompoundIdent `protobuf:"bytes,1,opt,name=FieldIdents,proto3,oneof"`
}

type AggFunction_ArgsMessage_FieldFunction struct {
	FieldFunction *AggFunction `protobuf:"bytes,2,opt,name=FieldFunction,proto3,oneof"`
}

type AggFunction_ArgsMessage_FieldCase struct {
	FieldCase *CaseExpr `protobuf:"bytes,3,opt,name=FieldCase,proto3,oneof"`
}

func (*AggFunction_ArgsMessage_FieldIdents) isAggFunction_ArgsMessage_ArgsClause() {}

func (*AggFunction_ArgsMessage_FieldFunction) isAggFunction_ArgsMessage_ArgsClause() {}

func (*AggFunction_ArgsMessage_FieldCase) isAggFunction_ArgsMessage_ArgsClause() {}

type QueryStmt_CTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliasName *Ident     `protobuf:"bytes,1,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
	Query     *QueryStmt `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	RParen    *Pos       `protobuf:"bytes,3,opt,name=RParen,proto3" json:"RParen,omitempty"`
}

func (x *QueryStmt_CTE) Reset() {
	*x = QueryStmt_CTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlast_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStmt_CTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStmt_CTE) ProtoMessage() {}

func (x *QueryStmt_CTE) ProtoReflect() protoreflect.Message {
	mi := &file_sqlast_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStmt_CTE.ProtoReflect.Descriptor instead.
func (*QueryStmt_CTE) Descriptor() ([]byte, []int) {
	return file_sqlast_proto_rawDescGZIP(), []int{24, 0}
}

func (x *QueryStmt_CTE) GetAliasName() *Ident {
	if x != nil {
		return x.AliasName
	}
	return nil
}

func (x *QueryStmt_CTE) GetQuery() *QueryStmt {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryStmt_CTE) GetRParen() *Pos {
	if x != nil {
		return x.RParen
	}
	return nil
}

var File_sqlast_proto protoreflect.FileDescriptor

var file_sqlast_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x43, 0x6f, 0x6c, 0x22, 0x5b, 0x0a, 0x05, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f,
	0x22, 0x36, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54,
	0x6f, 0x22, 0x78, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b,
	0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x08,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22,
	0x68, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02,
	0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x5f, 0x0a, 0x09,
	0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0xcd, 0x05,
	0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37, 0x0a, 0x0a,
	0x4c, 0x65, 0x66, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x4c,
	0x65, 0x66, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x10, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x20, 0x0a,
	0x02, 0x4f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x4f, 0x70, 0x12,
	0x39, 0x0a, 0x0b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x01, 0x52, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x42,
	0x0c, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0x76, 0x0a,
	0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x4f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x4f, 0x70, 0x12, 0x26, 0x0a,
	0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x04, 0x45, 0x78, 0x70, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1f,
	0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x45, 0x6c, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x45, 0x6c, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x1a, 0xc5,
	0x01, 0x0a, 0x0b, 0x41, 0x72, 0x67, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x41, 0x72, 0x67, 0x73,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x02, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02,
	0x4f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x4c, 0x65, 0x66,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x0b, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x2d, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x53, 0x43, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x41, 0x53, 0x43, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x23, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06,
	0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x0b,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22,
	0x7b, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x03, 0x41, 0x53, 0x54,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x41,
	0x53, 0x54, 0x12, 0x23, 0x0a, 0x06, 0x4c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x06, 0x4c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a,
	0x0a, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x45,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x22, 0xa6, 0x03, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x42, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x49, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x42, 0x69, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0c, 0x48, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x51,
	0x4c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x02, 0x4f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x4f, 0x70,
	0x12, 0x36, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x64, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x57, 0x69, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x52, 0x04, 0x57, 0x69, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x43, 0x54, 0x45, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x43, 0x54, 0x45, 0x52, 0x04, 0x43, 0x54,
	0x45, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x3b, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a,
	0x03, 0x43, 0x54, 0x45, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6d, 0x74, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x22,
	0x8f, 0x01, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x08,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b,
	0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x8d, 0x01, 0x0a,
	0x04, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x02, 0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x22, 0xd2, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x07, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x08, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22,
	0x5c, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x98, 0x01,
	0x0a, 0x0b, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x52, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07,
	0x56, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x56, 0x61, 0x72, 0x79,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x7b,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54,
	0x6f, 0x22, 0x45, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x61, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x48,
	0x0a, 0x08, 0x52, 0x65, 0x67, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x44, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x2f,
	0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x02, 0x54, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x54, 0x79, 0x22,
	0x81, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x0a,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x0a, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x53, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1d, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x4e, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x00, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0d,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x3d, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x48, 0x00, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x5b, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x09, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x09, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x4d, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xcc, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x12,
	0x21, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0c, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x43, 0x68, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71, 0x6c,
	0x61, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x08, 0x55, 0x55, 0x49, 0x44, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x08, 0x55, 0x55, 0x49, 0x44, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x4c, 0x6f, 0x6e,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x0b, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x33, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x73,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x4d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4d, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x52,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x22, 0xcf, 0x01, 0x0a,
	0x15, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xb4,
	0x02, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x6c, 0x61,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0a,
	0x53, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x53, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x68, 0x0a, 0x08, 0x4d, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x4d,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0e, 0x4d, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4d,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x4d, 0x79, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0f, 0x4d, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x43, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xf9, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x71,
	0x6c, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x06, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x06, 0x52, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x53,
	0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x49, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x71, 0x6c, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x42, 0x69, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0xbc, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69,
	0x6e, 0x75, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x74, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x74, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x74, 0x45, 0x71, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x74, 0x45, 0x71, 0x10, 0x08,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x71, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x45,
	0x71, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x72, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x10, 0x0d, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x10, 0x2a, 0x48,
	0x0a, 0x07, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x67, 0x67, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x10,
	0x02, 0x2a, 0x79, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x07, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x2f, 0x78, 0x61, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sqlast_proto_rawDescOnce sync.Once
	file_sqlast_proto_rawDescData = file_sqlast_proto_rawDesc
)

func file_sqlast_proto_rawDescGZIP() []byte {
	file_sqlast_proto_rawDescOnce.Do(func() {
		file_sqlast_proto_rawDescData = protoimpl.X.CompressGZIP(file_sqlast_proto_rawDescData)
	})
	return file_sqlast_proto_rawDescData
}

var file_sqlast_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sqlast_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_sqlast_proto_goTypes = []interface{}{
	(OperatorType)(0),                  // 0: sqlast.OperatorType
	(AggType)(0),                       // 1: sqlast.AggType
	(SetOperatorType)(0),               // 2: sqlast.SetOperatorType
	(JoinTypeCondition)(0),             // 3: sqlast.JoinTypeCondition
	(*Pos)(nil),                        // 4: sqlast.Pos
	(*Ident)(nil),                      // 5: sqlast.Ident
	(*CompoundIdent)(nil),              // 6: sqlast.CompoundIdent
	(*ObjectName)(nil),                 // 7: sqlast.ObjectName
	(*Operator)(nil),                   // 8: sqlast.Operator
	(*SetOperator)(nil),                // 9: sqlast.SetOperator
	(*JoinType)(nil),                   // 10: sqlast.JoinType
	(*SingleQuotedString)(nil),         // 11: sqlast.SingleQuotedString
	(*DoubleValue)(nil),                // 12: sqlast.DoubleValue
	(*LongValue)(nil),                  // 13: sqlast.LongValue
	(*BinaryExpr)(nil),                 // 14: sqlast.BinaryExpr
	(*UnaryExpr)(nil),                  // 15: sqlast.UnaryExpr
	(*ResultMessage)(nil),              // 16: sqlast.ResultMessage
	(*CaseExpr)(nil),                   // 17: sqlast.CaseExpr
	(*AggFunction)(nil),                // 18: sqlast.AggFunction
	(*JoinCondition)(nil),              // 19: sqlast.JoinCondition
	(*QualifiedJoin)(nil),              // 20: sqlast.QualifiedJoin
	(*OrderByExpr)(nil),                // 21: sqlast.OrderByExpr
	(*LimitExpr)(nil),                  // 22: sqlast.LimitExpr
	(*SQLSelectItem)(nil),              // 23: sqlast.SQLSelectItem
	(*Nested)(nil),                     // 24: sqlast.Nested
	(*InSubQuery)(nil),                 // 25: sqlast.InSubQuery
	(*SQLSelect)(nil),                  // 26: sqlast.SQLSelect
	(*SetOperationExpr)(nil),           // 27: sqlast.SetOperationExpr
	(*QueryStmt)(nil),                  // 28: sqlast.QueryStmt
	(*BigInt)(nil),                     // 29: sqlast.BigInt
	(*SmallInt)(nil),                   // 30: sqlast.SmallInt
	(*Int)(nil),                        // 31: sqlast.Int
	(*Double)(nil),                     // 32: sqlast.Double
	(*Real)(nil),                       // 33: sqlast.Real
	(*Float)(nil),                      // 34: sqlast.Float
	(*Decimal)(nil),                    // 35: sqlast.Decimal
	(*Boolean)(nil),                    // 36: sqlast.Boolean
	(*CharType)(nil),                   // 37: sqlast.CharType
	(*VarcharType)(nil),                // 38: sqlast.VarcharType
	(*Time)(nil),                       // 39: sqlast.Time
	(*Timestamp)(nil),                  // 40: sqlast.Timestamp
	(*Date)(nil),                       // 41: sqlast.Date
	(*Bytea)(nil),                      // 42: sqlast.Bytea
	(*Text)(nil),                       // 43: sqlast.Text
	(*Regclass)(nil),                   // 44: sqlast.Regclass
	(*UUID)(nil),                       // 45: sqlast.UUID
	(*Custom)(nil),                     // 46: sqlast.Custom
	(*CheckColumnSpec)(nil),            // 47: sqlast.CheckColumnSpec
	(*ReferencesColumnSpec)(nil),       // 48: sqlast.ReferencesColumnSpec
	(*UniqueColumnSpec)(nil),           // 49: sqlast.UniqueColumnSpec
	(*NotNullColumnSpec)(nil),          // 50: sqlast.NotNullColumnSpec
	(*ColumnConstraint)(nil),           // 51: sqlast.ColumnConstraint
	(*AutoIncrement)(nil),              // 52: sqlast.AutoIncrement
	(*MyDataTypeDecoration)(nil),       // 53: sqlast.MyDataTypeDecoration
	(*ColumnDef)(nil),                  // 54: sqlast.ColumnDef
	(*ReferenceKeyExpr)(nil),           // 55: sqlast.ReferenceKeyExpr
	(*ReferentialTableConstraint)(nil), // 56: sqlast.ReferentialTableConstraint
	(*CheckTableConstraint)(nil),       // 57: sqlast.CheckTableConstraint
	(*UniqueTableConstraint)(nil),      // 58: sqlast.UniqueTableConstraint
	(*TableConstraint)(nil),            // 59: sqlast.TableConstraint
	(*TableElement)(nil),               // 60: sqlast.TableElement
	(*MyEngine)(nil),                   // 61: sqlast.MyEngine
	(*MyCharset)(nil),                  // 62: sqlast.MyCharset
	(*TableOption)(nil),                // 63: sqlast.TableOption
	(*CreateTableStmt)(nil),            // 64: sqlast.CreateTableStmt
	(*CreateIndexStmt)(nil),            // 65: sqlast.CreateIndexStmt
	(*AggFunction_ArgsMessage)(nil),    // 66: sqlast.AggFunction.ArgsMessage
	(*QueryStmt_CTE)(nil),              // 67: sqlast.QueryStmt.CTE
}
var file_sqlast_proto_depIdxs = []int32{
	4,   // 0: sqlast.Ident.From:type_name -> sqlast.Pos
	4,   // 1: sqlast.Ident.To:type_name -> sqlast.Pos
	5,   // 2: sqlast.CompoundIdent.Idents:type_name -> sqlast.Ident
	5,   // 3: sqlast.ObjectName.Idents:type_name -> sqlast.Ident
	0,   // 4: sqlast.Operator.Type:type_name -> sqlast.OperatorType
	4,   // 5: sqlast.Operator.From:type_name -> sqlast.Pos
	4,   // 6: sqlast.Operator.To:type_name -> sqlast.Pos
	2,   // 7: sqlast.SetOperator.Type:type_name -> sqlast.SetOperatorType
	4,   // 8: sqlast.SetOperator.From:type_name -> sqlast.Pos
	4,   // 9: sqlast.SetOperator.To:type_name -> sqlast.Pos
	3,   // 10: sqlast.JoinType.Condition:type_name -> sqlast.JoinTypeCondition
	4,   // 11: sqlast.JoinType.From:type_name -> sqlast.Pos
	4,   // 12: sqlast.JoinType.To:type_name -> sqlast.Pos
	4,   // 13: sqlast.SingleQuotedString.From:type_name -> sqlast.Pos
	4,   // 14: sqlast.SingleQuotedString.To:type_name -> sqlast.Pos
	4,   // 15: sqlast.DoubleValue.From:type_name -> sqlast.Pos
	4,   // 16: sqlast.DoubleValue.To:type_name -> sqlast.Pos
	4,   // 17: sqlast.LongValue.From:type_name -> sqlast.Pos
	4,   // 18: sqlast.LongValue.To:type_name -> sqlast.Pos
	6,   // 19: sqlast.BinaryExpr.LeftIdents:type_name -> sqlast.CompoundIdent
	14,  // 20: sqlast.BinaryExpr.LeftBinary:type_name -> sqlast.BinaryExpr
	11,  // 21: sqlast.BinaryExpr.LeftSingleQuoted:type_name -> sqlast.SingleQuotedString
	12,  // 22: sqlast.BinaryExpr.LeftDouble:type_name -> sqlast.DoubleValue
	13,  // 23: sqlast.BinaryExpr.LeftLong:type_name -> sqlast.LongValue
	8,   // 24: sqlast.BinaryExpr.Op:type_name -> sqlast.Operator
	6,   // 25: sqlast.BinaryExpr.RightIdents:type_name -> sqlast.CompoundIdent
	14,  // 26: sqlast.BinaryExpr.RightBinary:type_name -> sqlast.BinaryExpr
	25,  // 27: sqlast.BinaryExpr.QueryValue:type_name -> sqlast.InSubQuery
	11,  // 28: sqlast.BinaryExpr.SingleQuotedString:type_name -> sqlast.SingleQuotedString
	12,  // 29: sqlast.BinaryExpr.DoubleValue:type_name -> sqlast.DoubleValue
	13,  // 30: sqlast.BinaryExpr.LongValue:type_name -> sqlast.LongValue
	4,   // 31: sqlast.UnaryExpr.From:type_name -> sqlast.Pos
	8,   // 32: sqlast.UnaryExpr.Op:type_name -> sqlast.Operator
	14,  // 33: sqlast.UnaryExpr.Expr:type_name -> sqlast.BinaryExpr
	5,   // 34: sqlast.ResultMessage.ResultIdent:type_name -> sqlast.Ident
	15,  // 35: sqlast.ResultMessage.ResultUnary:type_name -> sqlast.UnaryExpr
	4,   // 36: sqlast.CaseExpr.Case:type_name -> sqlast.Pos
	4,   // 37: sqlast.CaseExpr.CaseEnd:type_name -> sqlast.Pos
	8,   // 38: sqlast.CaseExpr.Operand:type_name -> sqlast.Operator
	14,  // 39: sqlast.CaseExpr.Conditions:type_name -> sqlast.BinaryExpr
	16,  // 40: sqlast.CaseExpr.Results:type_name -> sqlast.ResultMessage
	5,   // 41: sqlast.CaseExpr.ElseResult:type_name -> sqlast.Ident
	1,   // 42: sqlast.AggFunction.TypeName:type_name -> sqlast.AggType
	66,  // 43: sqlast.AggFunction.RestArgs:type_name -> sqlast.AggFunction.ArgsMessage
	4,   // 44: sqlast.AggFunction.From:type_name -> sqlast.Pos
	4,   // 45: sqlast.AggFunction.To:type_name -> sqlast.Pos
	14,  // 46: sqlast.JoinCondition.SearchCondition:type_name -> sqlast.BinaryExpr
	4,   // 47: sqlast.JoinCondition.On:type_name -> sqlast.Pos
	7,   // 48: sqlast.QualifiedJoin.Name:type_name -> sqlast.ObjectName
	5,   // 49: sqlast.QualifiedJoin.AliasName:type_name -> sqlast.Ident
	20,  // 50: sqlast.QualifiedJoin.LeftElement:type_name -> sqlast.QualifiedJoin
	10,  // 51: sqlast.QualifiedJoin.TypeCondition:type_name -> sqlast.JoinType
	19,  // 52: sqlast.QualifiedJoin.Spec:type_name -> sqlast.JoinCondition
	6,   // 53: sqlast.OrderByExpr.Expr:type_name -> sqlast.CompoundIdent
	4,   // 54: sqlast.OrderByExpr.OrderingPos:type_name -> sqlast.Pos
	4,   // 55: sqlast.LimitExpr.AllPos:type_name -> sqlast.Pos
	4,   // 56: sqlast.LimitExpr.Limit:type_name -> sqlast.Pos
	13,  // 57: sqlast.LimitExpr.LimitValue:type_name -> sqlast.LongValue
	13,  // 58: sqlast.LimitExpr.OffsetValue:type_name -> sqlast.LongValue
	6,   // 59: sqlast.SQLSelectItem.FieldIdents:type_name -> sqlast.CompoundIdent
	18,  // 60: sqlast.SQLSelectItem.FieldFunction:type_name -> sqlast.AggFunction
	17,  // 61: sqlast.SQLSelectItem.FieldCase:type_name -> sqlast.CaseExpr
	24,  // 62: sqlast.SQLSelectItem.FieldNested:type_name -> sqlast.Nested
	15,  // 63: sqlast.SQLSelectItem.FieldUnary:type_name -> sqlast.UnaryExpr
	14,  // 64: sqlast.SQLSelectItem.FieldBinary:type_name -> sqlast.BinaryExpr
	5,   // 65: sqlast.SQLSelectItem.AliasName:type_name -> sqlast.Ident
	23,  // 66: sqlast.Nested.AST:type_name -> sqlast.SQLSelectItem
	4,   // 67: sqlast.Nested.LParen:type_name -> sqlast.Pos
	4,   // 68: sqlast.Nested.RParen:type_name -> sqlast.Pos
	6,   // 69: sqlast.InSubQuery.Expr:type_name -> sqlast.CompoundIdent
	28,  // 70: sqlast.InSubQuery.SubQuery:type_name -> sqlast.QueryStmt
	4,   // 71: sqlast.InSubQuery.RParen:type_name -> sqlast.Pos
	23,  // 72: sqlast.SQLSelect.Projection:type_name -> sqlast.SQLSelectItem
	20,  // 73: sqlast.SQLSelect.FromClause:type_name -> sqlast.QualifiedJoin
	25,  // 74: sqlast.SQLSelect.InQuery:type_name -> sqlast.InSubQuery
	14,  // 75: sqlast.SQLSelect.BinExpr:type_name -> sqlast.BinaryExpr
	6,   // 76: sqlast.SQLSelect.GroupByClause:type_name -> sqlast.CompoundIdent
	14,  // 77: sqlast.SQLSelect.HavingClause:type_name -> sqlast.BinaryExpr
	4,   // 78: sqlast.SQLSelect.Select:type_name -> sqlast.Pos
	26,  // 79: sqlast.SetOperationExpr.LeftSide:type_name -> sqlast.SQLSelect
	9,   // 80: sqlast.SetOperationExpr.Op:type_name -> sqlast.SetOperator
	27,  // 81: sqlast.SetOperationExpr.RightSide:type_name -> sqlast.SetOperationExpr
	4,   // 82: sqlast.QueryStmt.With:type_name -> sqlast.Pos
	67,  // 83: sqlast.QueryStmt.CTEs:type_name -> sqlast.QueryStmt.CTE
	27,  // 84: sqlast.QueryStmt.Body:type_name -> sqlast.SetOperationExpr
	21,  // 85: sqlast.QueryStmt.OrderBy:type_name -> sqlast.OrderByExpr
	22,  // 86: sqlast.QueryStmt.LimitExpression:type_name -> sqlast.LimitExpr
	4,   // 87: sqlast.BigInt.From:type_name -> sqlast.Pos
	4,   // 88: sqlast.BigInt.To:type_name -> sqlast.Pos
	4,   // 89: sqlast.BigInt.Unsigned:type_name -> sqlast.Pos
	4,   // 90: sqlast.SmallInt.From:type_name -> sqlast.Pos
	4,   // 91: sqlast.SmallInt.To:type_name -> sqlast.Pos
	4,   // 92: sqlast.SmallInt.Unsigned:type_name -> sqlast.Pos
	4,   // 93: sqlast.Int.From:type_name -> sqlast.Pos
	4,   // 94: sqlast.Int.To:type_name -> sqlast.Pos
	4,   // 95: sqlast.Int.Unsigned:type_name -> sqlast.Pos
	4,   // 96: sqlast.Double.From:type_name -> sqlast.Pos
	4,   // 97: sqlast.Double.To:type_name -> sqlast.Pos
	4,   // 98: sqlast.Real.From:type_name -> sqlast.Pos
	4,   // 99: sqlast.Real.To:type_name -> sqlast.Pos
	4,   // 100: sqlast.Real.Unsigned:type_name -> sqlast.Pos
	4,   // 101: sqlast.Float.From:type_name -> sqlast.Pos
	4,   // 102: sqlast.Float.To:type_name -> sqlast.Pos
	4,   // 103: sqlast.Float.Unsigned:type_name -> sqlast.Pos
	4,   // 104: sqlast.Decimal.Numeric:type_name -> sqlast.Pos
	4,   // 105: sqlast.Decimal.RParen:type_name -> sqlast.Pos
	4,   // 106: sqlast.Decimal.Unsigned:type_name -> sqlast.Pos
	4,   // 107: sqlast.Boolean.From:type_name -> sqlast.Pos
	4,   // 108: sqlast.Boolean.To:type_name -> sqlast.Pos
	4,   // 109: sqlast.CharType.From:type_name -> sqlast.Pos
	4,   // 110: sqlast.CharType.To:type_name -> sqlast.Pos
	4,   // 111: sqlast.VarcharType.Character:type_name -> sqlast.Pos
	4,   // 112: sqlast.VarcharType.Varying:type_name -> sqlast.Pos
	4,   // 113: sqlast.VarcharType.RParen:type_name -> sqlast.Pos
	4,   // 114: sqlast.Time.From:type_name -> sqlast.Pos
	4,   // 115: sqlast.Time.To:type_name -> sqlast.Pos
	4,   // 116: sqlast.Timestamp.Timestamp:type_name -> sqlast.Pos
	4,   // 117: sqlast.Timestamp.Zone:type_name -> sqlast.Pos
	4,   // 118: sqlast.Date.From:type_name -> sqlast.Pos
	4,   // 119: sqlast.Date.To:type_name -> sqlast.Pos
	4,   // 120: sqlast.Bytea.From:type_name -> sqlast.Pos
	4,   // 121: sqlast.Bytea.To:type_name -> sqlast.Pos
	4,   // 122: sqlast.Text.From:type_name -> sqlast.Pos
	4,   // 123: sqlast.Text.To:type_name -> sqlast.Pos
	4,   // 124: sqlast.Regclass.From:type_name -> sqlast.Pos
	4,   // 125: sqlast.Regclass.To:type_name -> sqlast.Pos
	4,   // 126: sqlast.UUID.From:type_name -> sqlast.Pos
	4,   // 127: sqlast.UUID.To:type_name -> sqlast.Pos
	6,   // 128: sqlast.Custom.Ty:type_name -> sqlast.CompoundIdent
	14,  // 129: sqlast.CheckColumnSpec.Expr:type_name -> sqlast.BinaryExpr
	4,   // 130: sqlast.CheckColumnSpec.Check:type_name -> sqlast.Pos
	4,   // 131: sqlast.CheckColumnSpec.RParen:type_name -> sqlast.Pos
	4,   // 132: sqlast.ReferencesColumnSpec.References:type_name -> sqlast.Pos
	4,   // 133: sqlast.ReferencesColumnSpec.RParen:type_name -> sqlast.Pos
	7,   // 134: sqlast.ReferencesColumnSpec.TableName:type_name -> sqlast.ObjectName
	5,   // 135: sqlast.ReferencesColumnSpec.Columns:type_name -> sqlast.Ident
	4,   // 136: sqlast.UniqueColumnSpec.Primary:type_name -> sqlast.Pos
	4,   // 137: sqlast.UniqueColumnSpec.Key:type_name -> sqlast.Pos
	4,   // 138: sqlast.UniqueColumnSpec.Unique:type_name -> sqlast.Pos
	4,   // 139: sqlast.NotNullColumnSpec.Not:type_name -> sqlast.Pos
	4,   // 140: sqlast.NotNullColumnSpec.Null:type_name -> sqlast.Pos
	5,   // 141: sqlast.ColumnConstraint.Name:type_name -> sqlast.Ident
	4,   // 142: sqlast.ColumnConstraint.Constraint:type_name -> sqlast.Pos
	49,  // 143: sqlast.ColumnConstraint.UniqueSpec:type_name -> sqlast.UniqueColumnSpec
	47,  // 144: sqlast.ColumnConstraint.CheckSpec:type_name -> sqlast.CheckColumnSpec
	48,  // 145: sqlast.ColumnConstraint.ReferenceSpec:type_name -> sqlast.ReferencesColumnSpec
	50,  // 146: sqlast.ColumnConstraint.NotNullSpec:type_name -> sqlast.NotNullColumnSpec
	4,   // 147: sqlast.AutoIncrement.Auto:type_name -> sqlast.Pos
	4,   // 148: sqlast.AutoIncrement.Increment:type_name -> sqlast.Pos
	52,  // 149: sqlast.MyDataTypeDecoration.Automent:type_name -> sqlast.AutoIncrement
	5,   // 150: sqlast.ColumnDef.Name:type_name -> sqlast.Ident
	31,  // 151: sqlast.ColumnDef.IntData:type_name -> sqlast.Int
	30,  // 152: sqlast.ColumnDef.SmallIntData:type_name -> sqlast.SmallInt
	29,  // 153: sqlast.ColumnDef.BigIntData:type_name -> sqlast.BigInt
	37,  // 154: sqlast.ColumnDef.CharData:type_name -> sqlast.CharType
	38,  // 155: sqlast.ColumnDef.VarcharData:type_name -> sqlast.VarcharType
	45,  // 156: sqlast.ColumnDef.UUIDData:type_name -> sqlast.UUID
	40,  // 157: sqlast.ColumnDef.TimestampData:type_name -> sqlast.Timestamp
	11,  // 158: sqlast.ColumnDef.StringDefault:type_name -> sqlast.SingleQuotedString
	13,  // 159: sqlast.ColumnDef.LongDefault:type_name -> sqlast.LongValue
	5,   // 160: sqlast.ColumnDef.IdentDefault:type_name -> sqlast.Ident
	53,  // 161: sqlast.ColumnDef.MyDecos:type_name -> sqlast.MyDataTypeDecoration
	51,  // 162: sqlast.ColumnDef.Constraints:type_name -> sqlast.ColumnConstraint
	5,   // 163: sqlast.ReferenceKeyExpr.TableName:type_name -> sqlast.Ident
	5,   // 164: sqlast.ReferenceKeyExpr.Columns:type_name -> sqlast.Ident
	4,   // 165: sqlast.ReferenceKeyExpr.RParen:type_name -> sqlast.Pos
	4,   // 166: sqlast.ReferentialTableConstraint.Foreign:type_name -> sqlast.Pos
	5,   // 167: sqlast.ReferentialTableConstraint.Columns:type_name -> sqlast.Ident
	55,  // 168: sqlast.ReferentialTableConstraint.KeyExpr:type_name -> sqlast.ReferenceKeyExpr
	4,   // 169: sqlast.CheckTableConstraint.Check:type_name -> sqlast.Pos
	4,   // 170: sqlast.CheckTableConstraint.RParen:type_name -> sqlast.Pos
	14,  // 171: sqlast.CheckTableConstraint.Expr:type_name -> sqlast.BinaryExpr
	4,   // 172: sqlast.UniqueTableConstraint.Primary:type_name -> sqlast.Pos
	4,   // 173: sqlast.UniqueTableConstraint.Unique:type_name -> sqlast.Pos
	4,   // 174: sqlast.UniqueTableConstraint.RParen:type_name -> sqlast.Pos
	5,   // 175: sqlast.UniqueTableConstraint.Columns:type_name -> sqlast.Ident
	4,   // 176: sqlast.TableConstraint.Constraint:type_name -> sqlast.Pos
	5,   // 177: sqlast.TableConstraint.Name:type_name -> sqlast.Ident
	56,  // 178: sqlast.TableConstraint.SpecReference:type_name -> sqlast.ReferentialTableConstraint
	57,  // 179: sqlast.TableConstraint.SpecCheck:type_name -> sqlast.CheckTableConstraint
	58,  // 180: sqlast.TableConstraint.SpecUnique:type_name -> sqlast.UniqueTableConstraint
	54,  // 181: sqlast.TableElement.ColumnDefElement:type_name -> sqlast.ColumnDef
	59,  // 182: sqlast.TableElement.TableConstraintElement:type_name -> sqlast.TableConstraint
	4,   // 183: sqlast.MyEngine.Engine:type_name -> sqlast.Pos
	5,   // 184: sqlast.MyEngine.Name:type_name -> sqlast.Ident
	4,   // 185: sqlast.MyCharset.Default:type_name -> sqlast.Pos
	4,   // 186: sqlast.MyCharset.Charset:type_name -> sqlast.Pos
	5,   // 187: sqlast.MyCharset.Name:type_name -> sqlast.Ident
	61,  // 188: sqlast.TableOption.MyEngineOption:type_name -> sqlast.MyEngine
	62,  // 189: sqlast.TableOption.MyCharsetOption:type_name -> sqlast.MyCharset
	4,   // 190: sqlast.CreateTableStmt.Create:type_name -> sqlast.Pos
	7,   // 191: sqlast.CreateTableStmt.Name:type_name -> sqlast.ObjectName
	60,  // 192: sqlast.CreateTableStmt.Elements:type_name -> sqlast.TableElement
	63,  // 193: sqlast.CreateTableStmt.Options:type_name -> sqlast.TableOption
	4,   // 194: sqlast.CreateIndexStmt.Create:type_name -> sqlast.Pos
	7,   // 195: sqlast.CreateIndexStmt.TableName:type_name -> sqlast.ObjectName
	5,   // 196: sqlast.CreateIndexStmt.IndexName:type_name -> sqlast.Ident
	5,   // 197: sqlast.CreateIndexStmt.MethodName:type_name -> sqlast.Ident
	5,   // 198: sqlast.CreateIndexStmt.ColumnNames:type_name -> sqlast.Ident
	4,   // 199: sqlast.CreateIndexStmt.RParen:type_name -> sqlast.Pos
	25,  // 200: sqlast.CreateIndexStmt.InQuery:type_name -> sqlast.InSubQuery
	14,  // 201: sqlast.CreateIndexStmt.BinExpr:type_name -> sqlast.BinaryExpr
	6,   // 202: sqlast.AggFunction.ArgsMessage.FieldIdents:type_name -> sqlast.CompoundIdent
	18,  // 203: sqlast.AggFunction.ArgsMessage.FieldFunction:type_name -> sqlast.AggFunction
	17,  // 204: sqlast.AggFunction.ArgsMessage.FieldCase:type_name -> sqlast.CaseExpr
	5,   // 205: sqlast.QueryStmt.CTE.AliasName:type_name -> sqlast.Ident
	28,  // 206: sqlast.QueryStmt.CTE.Query:type_name -> sqlast.QueryStmt
	4,   // 207: sqlast.QueryStmt.CTE.RParen:type_name -> sqlast.Pos
	208, // [208:208] is the sub-list for method output_type
	208, // [208:208] is the sub-list for method input_type
	208, // [208:208] is the sub-list for extension type_name
	208, // [208:208] is the sub-list for extension extendee
	0,   // [0:208] is the sub-list for field type_name
}

func init() { file_sqlast_proto_init() }
func file_sqlast_proto_init() {
	if File_sqlast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sqlast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleQuotedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifiedJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLSelectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InSubQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Real); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarcharType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regclass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Custom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencesColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotNullColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyDataTypeDecoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceKeyExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferentialTableConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTableConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueTableConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCharset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggFunction_ArgsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlast_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStmt_CTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sqlast_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BinaryExpr_LeftIdents)(nil),
		(*BinaryExpr_LeftBinary)(nil),
		(*BinaryExpr_LeftSingleQuoted)(nil),
		(*BinaryExpr_LeftDouble)(nil),
		(*BinaryExpr_LeftLong)(nil),
		(*BinaryExpr_RightIdents)(nil),
		(*BinaryExpr_RightBinary)(nil),
		(*BinaryExpr_QueryValue)(nil),
		(*BinaryExpr_SingleQuotedString)(nil),
		(*BinaryExpr_DoubleValue)(nil),
		(*BinaryExpr_LongValue)(nil),
	}
	file_sqlast_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ResultMessage_ResultIdent)(nil),
		(*ResultMessage_ResultUnary)(nil),
	}
	file_sqlast_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SQLSelectItem_FieldIdents)(nil),
		(*SQLSelectItem_FieldFunction)(nil),
		(*SQLSelectItem_FieldCase)(nil),
		(*SQLSelectItem_FieldNested)(nil),
		(*SQLSelectItem_FieldUnary)(nil),
		(*SQLSelectItem_FieldBinary)(nil),
	}
	file_sqlast_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SQLSelect_InQuery)(nil),
		(*SQLSelect_BinExpr)(nil),
	}
	file_sqlast_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*ColumnConstraint_UniqueSpec)(nil),
		(*ColumnConstraint_CheckSpec)(nil),
		(*ColumnConstraint_ReferenceSpec)(nil),
		(*ColumnConstraint_NotNullSpec)(nil),
	}
	file_sqlast_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ColumnDef_IntData)(nil),
		(*ColumnDef_SmallIntData)(nil),
		(*ColumnDef_BigIntData)(nil),
		(*ColumnDef_CharData)(nil),
		(*ColumnDef_VarcharData)(nil),
		(*ColumnDef_UUIDData)(nil),
		(*ColumnDef_TimestampData)(nil),
		(*ColumnDef_StringDefault)(nil),
		(*ColumnDef_LongDefault)(nil),
		(*ColumnDef_IdentDefault)(nil),
	}
	file_sqlast_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*TableConstraint_SpecReference)(nil),
		(*TableConstraint_SpecCheck)(nil),
		(*TableConstraint_SpecUnique)(nil),
	}
	file_sqlast_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*TableElement_ColumnDefElement)(nil),
		(*TableElement_TableConstraintElement)(nil),
	}
	file_sqlast_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*TableOption_MyEngineOption)(nil),
		(*TableOption_MyCharsetOption)(nil),
	}
	file_sqlast_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*CreateIndexStmt_InQuery)(nil),
		(*CreateIndexStmt_BinExpr)(nil),
	}
	file_sqlast_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*AggFunction_ArgsMessage_FieldIdents)(nil),
		(*AggFunction_ArgsMessage_FieldFunction)(nil),
		(*AggFunction_ArgsMessage_FieldCase)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sqlast_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sqlast_proto_goTypes,
		DependencyIndexes: file_sqlast_proto_depIdxs,
		EnumInfos:         file_sqlast_proto_enumTypes,
		MessageInfos:      file_sqlast_proto_msgTypes,
	}.Build()
	File_sqlast_proto = out.File
	file_sqlast_proto_rawDesc = nil
	file_sqlast_proto_goTypes = nil
	file_sqlast_proto_depIdxs = nil
}

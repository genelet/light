syntax = "proto3";
package sqlight;

option go_package = "./xlight";

message CompoundIdent {
	repeated string Idents = 1;
}

enum OperatorType {
	Plus = 0;
	Minus = 1;
	Multiply = 2;
	Divide = 3;
	Modulus = 4;
	Gt = 5;
	Lt = 6;
	GtEq = 7;
	LtEq = 8;
	Eq = 9;
	NotEq = 10;
	And = 11;
	Or = 12;
	Not = 13;
	Like = 14;
	NotLike = 15;
	None = 16;
}

enum SetOperatorType {
	Union = 0;
	Intersect = 1;
	Except = 2;
}

enum JoinTypeCondition {
	INNER = 0;
	LEFT = 1;
	RIGHT = 2;
	FULL = 3;
	LEFTOUTER = 4;
	RIGHTOUTER = 5;
	FULLOUTER = 6;
	IMPLICIT = 7;
}

message SingleQuotedString {
    string Value = 1;
}

message DoubleValue {
    double Value = 1;
}

message LongValue {
    int64 Value = 1;
}

message BinaryExpr {
    ArgsNode Left = 1;
    OperatorType Op = 2;
    ArgsNode Right = 3;
}

message UnaryExpr {
    OperatorType Op = 1;
    BinaryExpr Expr = 2;
}

message ConditionNode {
    oneof ConditionNodeClause {
        BinaryExpr BinaryItem = 1;
    }
}

message CaseExpr {
    OperatorType Operand = 1;
    repeated ConditionNode Conditions = 2;
    repeated ArgsNode Results = 3;
    ArgsNode ElseResult = 4;
}

message ArgsNode {
    oneof ArgsNodeClause {
        ValueNode ValueItem = 1;
        AggFunction FunctionItem = 2;
        CaseExpr CaseItem = 3;
        ArgsNode NestedItem = 4;
        UnaryExpr UnaryItem = 5;
        WhereNode WhereItem = 6;
    }
}

enum AggType {
	UnknownAgg = 0;
	MAX    = 1;
	MIN    = 2;
	COUNT  = 3;
	SUM    = 4;
	AVG    = 5;
}

message AggFunction {
	AggType TypeName = 1;
	repeated ArgsNode RestArgs = 2;
}

message JoinSpec {
    oneof JoinSpecClause {
        BinaryExpr JoinItem = 1;
        NamedColumnsJoin NameItem = 2;
    }
}

message QualifiedJoin {
    TableReference LeftElement = 1;
    JoinTypeCondition Type = 2;
    TableReference RightElement = 3;
    JoinSpec Spec = 4;
}

message NamedColumnsJoin {
    repeated string ColumnList = 1;
}

message Table {
    CompoundIdent Name = 1;
    string Alias = 2;
    repeated ArgsNode Args = 3;
    repeated ArgsNode WithHints = 4;
}

message NaturalJoin {
    TableReference LeftElement = 1;
    JoinTypeCondition Type = 2;
    TableReference RightElement = 3;
}

message TableReference {
    oneof TableReferenceClause {
        Table TableItem = 1;
        QualifiedJoin QualifiedItem = 2;
        NaturalJoin NaturalItem = 3;
    }
}

message OrderByExpr {
    CompoundIdent Expr = 1;
    bool ASCBool = 2;
}

message LimitExpr {
    bool AllBool = 1;
    LongValue LimitValue = 2;
    LongValue OffsetValue = 3;
}

message AliasSelectItem {
    ArgsNode Expr = 1;
    string Alias = 2;
}

message SQLSelectItem {
    oneof SQLSelectItemClause {
        ArgsNode UnnamedItem = 1;
        AliasSelectItem AliasItem = 2;
        CompoundIdent WildcardItem = 3;
    }
}

message InSubQuery {
    CompoundIdent Expr = 1;
    QueryStmt SubQuery = 2;
    bool Negated = 3;
}

message WhereNode {
    oneof WhereNodeClause {
        InSubQuery InQuery = 1;
        BinaryExpr BinExpr = 2;
    }
}

message ValueNode {
    oneof ValueNodeClause {
        SingleQuotedString StringItem = 1;
        LongValue LongItem = 2;
        DoubleValue DoubleItem = 3;
        CompoundIdent CompoundItem = 15;
    }
}

message SQLSelect {
    bool DistinctBool = 1;
    repeated SQLSelectItem Projection = 2;
    repeated TableReference FromClause = 3;
    WhereNode WhereClause = 4;
    repeated CompoundIdent GroupByClause = 5;
    BinaryExpr HavingClause = 6;
}

message SetOperationExpr {
    SetOperatorType Op = 1;
    bool All = 2;
    SQLSetExpr Left = 3;
    SQLSetExpr Right = 4;
}

message SQLSetExpr {
    oneof SQLSetExprClause {
        SQLSelect SelectItem = 1;
        SetOperationExpr ExprItem = 2;
    }
}

message QueryStmt {
    message CTE {
        string AliasName = 1;
        QueryStmt Query = 2;
    }
    repeated CTE CTEs = 2;
    SQLSetExpr Body = 3;
    repeated OrderByExpr OrderBy = 4;
    LimitExpr LimitExpression = 5;
}

// start ... create table

message BigInt {
        bool IsUnsigned = 3;
}

message SmallInt {
        bool IsUnsigned = 3;
}

message Int {
        bool IsUnsigned = 3;
}

message Real {
        bool IsUnsigned = 3;
}

message Float {
        uint32 Size = 1;
        bool IsUnsigned = 4;
}

message Decimal {
        uint32 Precision = 1;
        uint32 Scale = 2;
        bool IsUnsigned = 5;
}

message CharType {
        uint32 Size = 1;
}

message VarcharType {
        uint32 Size = 1;
}

message Timestamp {
        bool WithTimeZone = 1;
}

enum DataTypeSingle {
	DataTypeSingleUnknown = 0;
    Double = 1;
    Boolean = 2;
    Time = 3;
    Date = 4;
	Bytea = 5;
	Text = 6;
	Regclass = 7;
	UUID = 8;
}

message Custom {
        CompoundIdent Ty = 1;
}

message Type {
        oneof TypeClause {
                Int IntData = 1;
                SmallInt SmallIntData = 2;
                BigInt BigIntData = 3;
                Decimal DecimalData = 4;
                CharType CharData = 8;
                VarcharType VarcharData = 9;
                DataTypeSingle UUIDData = 14;
                Timestamp TimestampData = 15;
        }
}

message ReferencesColumnSpec {
        CompoundIdent TableName = 3;
        repeated string Columns = 4;
}

message UniqueColumnSpec {
        bool IsPrimaryKey = 1;
}

enum NotNullColumnSpecType {
	NotNullColumnSpecTypeUnknown = 0;
	NotNullColumnSpec = 1;
}

message ColumnConstraintSpec {
        oneof ColumnConstraintSpecClause {
                UniqueColumnSpec UniqueItem = 3;
                BinaryExpr CheckItem = 4;
                ReferencesColumnSpec ReferenceItem = 5;
                NotNullColumnSpecType NotNullItem = 6;
        }
}

message ColumnConstraint {
        string Name = 1;
        ColumnConstraintSpec Spec = 3;
}

enum AutoIncrementType {
	AutoIncrement = 0;	
}

message ColumnDef {
        string Name = 1;
        Type DataType = 2;
        ValueNode Default = 3;
        repeated AutoIncrementType MyDecos = 4;
        repeated ColumnConstraint Constraints = 5;
}

message ReferenceKeyExpr {
        string TableName = 1;
        repeated string Columns = 2;
}

message ReferentialTableConstraint {
        repeated string Columns = 1;
        ReferenceKeyExpr KeyExpr = 2;
}

message UniqueTableConstraint {
        bool IsPrimary = 1;
        repeated string Columns = 2;
}

message TableConstraintSpec {
        oneof TableContraintSpecClause {
                ReferentialTableConstraint ReferenceItem = 1;
                BinaryExpr CheckItem = 2;
                UniqueTableConstraint UniqueItem = 3;
        }
}

message TableConstraint {
        string Name = 1;
        TableConstraintSpec Spec = 2;
}

message TableElement {
        oneof TableElementClause {
                ColumnDef ColumnDefElement = 1;
                TableConstraint TableConstraintElement = 2;
        }
}

message MyEngine {
        bool Equal = 1;
        string Name = 2;
}

message MyCharset {
        bool IsDefault = 1;
        bool Equal = 2;
        string Name = 3;
}

message TableOption {
        oneof TableOptionClause {
                MyEngine MyEngineOption = 1;
                MyCharset MyCharsetOption = 2;
        }
}

message CreateTableStmt {
        CompoundIdent Name = 1;
        repeated TableElement Elements = 2;
        string Location = 3;
        bool NotExists = 4;
        repeated TableOption Options = 5;
}

message DropTableStmt {
        repeated CompoundIdent TableNames = 1;
        bool Cascade = 2;
        bool IfExists = 3;
}

// end create table

syntax = "proto3";
package sqlight;

option go_package = "./xlight";

enum OperatorType {
	Plus = 0;
	Minus = 1;
	Multiply = 2;
	Divide = 3;
	Modulus = 4;
	Gt = 5;
	Lt = 6;
	GtEq = 7;
	LtEq = 8;
	Eq = 9;
	NotEq = 10;
	And = 11;
	Or = 12;
	Not = 13;
	Like = 14;
	NotLike = 15;
	None = 16;
}

message CompoundIdent {
	repeated string Idents = 1;
}

enum AggType {
	UnknownAgg = 0;
	MAX    = 1;
	MIN    = 2;
	COUNT  = 3;
	SUM    = 4;
	AVG    = 5;
}

enum SetOperatorType {
	Union = 0;
	Intersect = 1;
	Except = 2;
}

enum JoinTypeCondition {
	INNER = 0;
	LEFT = 1;
	RIGHT = 2;
	FULL = 3;
	LEFTOUTER = 4;
	RIGHTOUTER = 5;
	FULLOUTER = 6;
	IMPLICIT = 7;
}

message AggFunction {
	AggType TypeName = 1;
	repeated ArgsNode RestArgs = 2;
}

message BinaryExpr {
    ArgsNode Left = 1;
    OperatorType Op = 2;
    ArgsNode Right = 3;
}

message UnaryExpr {
    OperatorType Op = 1;
    BinaryExpr Expr = 2;
}

message ConditionNode {
    oneof ConditionNodeClause {
        BinaryExpr BinaryItem = 1;
    }
}

message CaseExpr {
    OperatorType Operand = 1;
    repeated ConditionNode Conditions = 2;
    repeated ArgsNode Results = 3;
    ArgsNode ElseResult = 4;
}

message ArgsNode {
    oneof ArgsNodeClause {
        ValueNode ValueItem = 1;
        AggFunction FunctionItem = 2;
        CaseExpr CaseItem = 3;
        Nested NestedItem = 4;
        UnaryExpr UnaryItem = 5;
        WhereNode WhereItem = 6;
    }
}

message JoinCondition {
    BinaryExpr SearchCondition = 1;
}

message TableJoinElement {
    TableReference Ref = 1;
}

message JoinSpec {
    oneof JoinSpecClause {
        JoinCondition JoinItem = 1;
        NamedColumnsJoin NameItem = 2;
    }
}

message QualifiedJoin {
    TableJoinElement LeftElement = 1;
    JoinTypeCondition Type = 2;
    TableJoinElement RightElement = 3;
    JoinSpec Spec = 4;
}

message NamedColumnsJoin {
    repeated string ColumnList = 1;
}

message Table {
    CompoundIdent Name = 1;
    string Alias = 2;
    repeated ArgsNode Args = 3;
    repeated ArgsNode WithHints = 5;
}

message NaturalJoin {
    TableJoinElement LeftElement = 1;
    JoinTypeCondition Type = 2;
    TableJoinElement RightElement = 3;
}

message TableReference {
    oneof TableReferenceClause {
        Table TableItem = 1;
        QualifiedJoin QualifiedItem = 2;
        NaturalJoin NaturalItem = 3;
    }
}

message OrderByExpr {
    CompoundIdent Expr = 1;
    bool ASCBool = 2;
}

message LimitExpr {
    bool AllBool = 1;
    int64 LimitValue = 2;
    int64 OffsetValue = 3;
}

message UnnamedSelectItem {
    ArgsNode Node = 1;
}

message AliasSelectItem {
    ArgsNode Expr = 1;
    string Alias = 2;
}

message QualifiedWildcardSelectItem {
    CompoundIdent Prefix = 1;
}

message SQLSelectItem {
    oneof SQLSelectItemClause {
        UnnamedSelectItem UnnamedItem = 1;
        AliasSelectItem AliasItem = 2;
        QualifiedWildcardSelectItem WildcardItem = 3;
    }
}

message Nested {
    ArgsNode AST = 1;
}

message InSubQuery {
    CompoundIdent Expr = 1;
    QueryStmt SubQuery = 2;
    bool Negated = 3;
}

message WhereNode {
    oneof WhereNodeClause {
        InSubQuery InQuery = 1;
        BinaryExpr BinExpr = 2;
    }
}

message ValueNode {
    oneof ValueNodeClause {
        string StringItem = 1;
        int64 LongItem = 2;
        double DoubleItem = 3;
        CompoundIdent CompoundItem = 15;
    }
}

message SQLSelect {
    bool DistinctBool = 1;
    repeated SQLSelectItem Projection = 2;
    repeated TableReference FromClause = 3;
    WhereNode WhereClause = 4;
    repeated CompoundIdent GroupByClause = 5;
    BinaryExpr HavingClause = 6;
}

message SetOperationExpr {
    SetOperatorType Op = 1;
    bool All = 2;
    SQLSetExpr Left = 3;
    SQLSetExpr Right = 4;
}

message SQLSetExpr {
    oneof SQLSetExprClause {
        SQLSelect SelectItem = 1;
        SetOperationExpr ExprItem = 2;
    }
}

message QueryStmt {
    message CTE {
        string AliasName = 1;
        QueryStmt Query = 2;
    }
    repeated CTE CTEs = 2;
    SQLSetExpr Body = 3;
    repeated OrderByExpr OrderBy = 4;
    LimitExpr LimitExpression = 5;
}
